{"version":3,"sources":["util/envVariablesValidations.ts","constants.ts","configs/chainsSetup/customHashers.ts","actions/sourceTargetActions.ts","configs/index.ts","util/createPolkadotJsUrl.ts","types/sourceTargetTypes.ts","reducers/sourceTargetReducer.ts","contexts/SourceTargetContextProvider.tsx","hooks/connections/useLoadingApi.ts","util/logger.ts","hooks/subscriptions/useApiSubscription.ts","hooks/react/useIsMounted.ts","actions/accountActions.ts","hooks/react/useMountedState.ts","hooks/subscriptions/useBalance.ts","util/getConfigs.ts","util/getDeriveAccount.ts","reducers/accountReducer.ts","actions/messageActions.ts","reducers/messageReducer.ts","contexts/MessageContext.tsx","types/keyringTypes.ts","contexts/KeyringContextProvider.tsx","util/getSubstrateDynamicNames.ts","hooks/chain/useChainGetters.ts","hooks/api/useApiCalls.ts","contexts/ApiCallsContextProvider.tsx","hooks/context/useAccountsContextSetUp.ts","contexts/AccountContextProvider.tsx","types/transactionTypes.ts","hooks/transactions/useLocalStorage.ts","actions/transactionActions.ts","components/Buttons.tsx","util/getReceiverAddress.ts","util/evalUnits.ts","reducers/transactionReducer.ts","contexts/TransactionContext.tsx","util/shortenItem.ts","types/subscriptionsTypes.ts","hooks/subscriptions/useBlocksInfo.ts","hooks/subscriptions/useBridgedBlocks.ts","hooks/chain/useChainProfile.ts","hooks/subscriptions/useMessagesLane.ts","hooks/chain/useLaneId.ts","hooks/subscriptions/useSubscriptions.ts","contexts/SubscriptionsContextProvider.tsx","util/transactionUtils.ts","util/chainsUtils.ts","hooks/transactions/useTransactionNonces.ts","hooks/transactions/useTransactionSteps.ts","components/Icons.tsx","components/TransactionHeader.tsx","components/TransactionReceipt.tsx","components/TransactionPayload.tsx","components/TransactionSwitchTab.tsx","components/TransactionStatus.tsx","hooks/transactions/useTransactionPayloadDisplay.ts","components/TransactionStatusMock.tsx","components/Transactions.tsx","components/StorageDrawer.tsx","components/Inputs.tsx","components/theme.ts","components/LayoutBoxes.tsx","components/MenuAction.tsx","components/Network.tsx","components/Alert.tsx","hooks/react/usePrevious.ts","hooks/transactions/useResetTransactionState.ts","contexts/GUIContextProvider.tsx","hooks/connections/useApiConnection.ts","hooks/api/useDispatchGenericCall.ts","hooks/transactions/useEstimateFee.ts","hooks/transactions/usePayload.ts","hooks/transactions/useTransactionPreparation.ts","hooks/transactions/useTransactionType.ts","hooks/chain/useSendMessage.ts","components/EstimatedFee.tsx","hooks/react/useDebounceState.ts","components/CustomCall.tsx","components/ExtensionAccountCheck.tsx","components/Remark.tsx","hooks/accounts/useAccounts.ts","hooks/subscriptions/useApiBalance.ts","components/Balance.tsx","components/AccountIdenticon.tsx","types/accountTypes.ts","components/AccountDisplay.tsx","components/Account.tsx","components/Sender.tsx","util/formatAccounts.ts","components/SnackBar.tsx","components/TokenSymbol.tsx","components/ReceiverInput.tsx","hooks/transactions/useReceiver.ts","components/GenericAccount.tsx","hooks/accounts/useGenericAccount.ts","components/ReceiverDerivedAccount.tsx","components/Receiver.tsx","components/Transfer.tsx","screens/Main.tsx","App.tsx","hooks/connections/useConnections.ts","index.tsx"],"names":["expectedVariables","INCORRECT_FORMAT","GENERIC","SourceTargetActionsTypes","hashers","blake2Keccak256Hasher","data","u8aConcat","blake2AsU8a","keccakAsU8a","getProviderInfo","chainNumber","types","providedHasher","process","providerUrl","variable","envVariable","Error","checkEnvVariable","hasher","polkadotjsUrl","jsonU8a","stringToU8a","JSON","stringify","compressed","zlibSync","level","encoded","base64Encode","encodeURIComponent","createPolkadotJsUrl","provider","WsProvider","ChainDetails","SourceTargetActionsCreators","chain","payload","type","SWAP_CHAINS","sourceTargetReducer","state","action","SOURCE","newState","TARGET","SourceTargetContext","React","createContext","useSourceTarget","useContext","UpdateSourceTargetContext","SourceTargetContextProvider","connections","children","useReducer","sourceTargetChains","dispatchChangeSourceTarget","Provider","value","useLoadingApi","isSourceApiReady","sourceChainDetails","apiConnection","isApiReady","isTargetApiReady","targetChainDetails","areApiReady","sourceReady","targetReady","winston","addColors","debug","error","info","warn","myformat","format","cli","all","logger","createLogger","transports","Console","useApiSubscription","fn","isReady","useEffect","unsub","then","u","catch","e","AccountActionsTypes","useMountedState","initialState","isMounted","mountedRef","useRef","useCallback","current","useIsMounted","counter","useState","setState","ZERO","BN","initValues","chainTokens","formattedBalance","free","useBalance","api","address","providedSi","getBalanceCall","query","system","account","registry","formatBalance","decimals","chainDecimals","withUnit","withSi","Boolean","AccountActionCreators","sourceTarget","SET_ACCOUNT","accounts","SET_ACCOUNTS","displaySenderAccounts","SET_DISPLAY_SENDER_ACCOUNTS","senderAccountBalance","senderCompanionAccountBalance","SET_SENDER_BALANCES","getConfigs","apiPromise","a","properties","getChainProperties","ss58Format","rpc","name","systemChain","chainName","split","prop","bridgeIds","get","parseInt","toString","getBridgeId","configs","bridgeId","getDeriveAccount","input","compactAddLength","decodeAddress","encodeAddress","blake2AsHex","Uint8Array","from","accountReducer","sourceChainName","companionAccount","MessageActionsTypes","MessageActionsCreators","RESET_MESSAGE","message","variant","TRIGGER_MESSAGE","messageReducer","KeyringStatuses","MessageContext","UpdateMessageContext","useUpdateMessageContext","MessageContextProvider","props","dispatchMessage","KeyringContext","useKeyringContext","KeyringContextProvider","INIT","keyringStatus","setKeyringStatus","keyringPairs","setKeyringPairs","keyringPairsReady","setkeyringPairsReady","extensionExists","setExtensionExists","accountExists","setAccountExists","loadAccounts","asyncLoadAccounts","LOADING","web3Enable","length","web3Accounts","allAccounts","map","meta","keyring","loadAll","isDevelopment","READY","ERROR","keyringOptions","getPairs","getSubstrateDynamicNames","key","bridgedGrandpaChain","bridgedMessages","estimatedFeeMethodName","latestReceivedNonceMethodName","storageKey","useChainGetters","sourceApi","sourceIsApiReady","sourceChain","sourceSS58Format","targetApi","targetIsApiReady","targetChain","targetSS58Format","getValuesByChain","substrateValues","getSS58PrefixByChain","useApiCalls","createType","stateCall","methodName","at","params","push","call","updateSenderAccountsInformation","dispatchAccount","formatBalanceAddress","getAccountInformation","sourceRole","targetRole","sourceConfigs","targetConfigs","Promise","sourceAddress","toDerive","sourceBalance","companionAddress","dataCompanion","targetBalance","toLocaleUpperCase","balance","sourceAddresses","targetAddresses","ApiCallsContext","useApiCallsContext","ApiCallsContextProvider","apiCalls","useAccountsContextSetUp","accountState","accountBalance","companionBalance","AccountContext","UpdateAccountContext","useAccountContext","AccountContextProvider","TransactionStatusEnum","SwitchTabEnum","TransactionTypes","EvalMessages","useLocalStorage","localStorageKey","localStorage","getItem","localValue","setLocalValue","setItem","TransactionActionTypes","useStyles","makeStyles","theme","submit","padding","spacing","borderRadius","contact","backgroundColor","palette","secondary","light","switchMode","fontSize","typography","body2","drawerMenu","justifyContent","ButtonExt","startIcon","disableElevation","href","classes","Button","className","onClick","url","newWindow","window","open","opener","openInNewTab","ButtonDrawerMenu","color","fullWidth","ButtonSwitchMode","ButtonSubmit","Box","mt","mb","id","TransactionActionCreators","senderAccount","SET_SENDER_ACCOUNT","receiverAddress","SET_RECEIVER_ADDRESS","receiverPayload","SET_RECEIVER","transferAmount","SET_TRANSFER_AMOUNT","estimatedFeeError","estimatedFee","estimatedFeeLoading","SET_ESTIMATED_FEE","transactionRunning","SET_TRANSACTION_RUNNING","initialTransaction","CREATE_TRANSACTION_STATUS","updatedValues","UPDATE_CURRENT_TRANSACTION_STATUS","payloadError","SET_PAYLOAD","RESET","getReceiverAddress","decodedReceiverAddress","base58Decode","checkAddressChecksum","isValidDerivedAcccount","ss58Decoded","formatFound","prefix","getChainBySS58Prefix","getSiValue","si","pow","symbol","isMil","allowedSymbols","s","join","replace","floats","RegExp","ints","alphaFloats","alphaInts","isReadyToExecute","setReceiver","unformattedReceiverAddress","transactionReadyToExecute","addressValidationError","showBalance","genericReceiverAccount","receiver","validateAccount","derivedReceiverAccount","transactionReducer","console","log","transferAmountError","test","GIBBERISH","siVal","find","numberStr","numeric","SYMBOL_ERROR","decimalsBn","containDecimal","includes","decPart","fracPart","fracDecimals","fracExp","mul","add","div","eq","SUCCESS","evalUnits","actualValue","transactionDisplayPayload","transactions","stateTransaction","updateTransaction","TransactionContext","UpdateTransactionContext","useTransactionContext","useUpdateTransactionContext","TransactionContextProvider","payloadHex","transaction","dispatchTransaction","ChainSubscriptions","item","substring","useBlocksInfo","bestBlock","setBestBlock","bestBlockFinalized","setBestBlockFinalized","getBestNumber","derive","bestNumber","res","getBestBlockFinalized","bestNumberFinalized","useBridgedBlocks","bestBridgedFinalizedBlock","setBestBridgedFinalizedBlock","bestFinalizedBlock","setBestFinalizedBlock","getBestFinalizedBlock","bestFinalized","getBestBridgedFinalizedBlock","importedHeaders","importedHeader","toJSON","number","emptyProfile","target","source","useMessagesLane","latestReceivedNonce","pendingMessages","totalMessages","outboundLanes","setOutboudLanes","bridgeReceivedMessages","setBridgesReceivedMessages","laneId","getOutboundLaneData","latest_generated_nonce","latest_received_nonce","sub","isNeg","getInboundLaneData","inboundLanes","useSubscriptions","ChainDetail","chainDetail","restSource","restTarget","useChainProfile","blockInfo","messagesLane","SubscriptionsContext","useSubscriptionsContext","SubscriptionsContextProvider","onSourceChainSubscriptions","onTargetChainSubscriptions","subscriptions","getTransactionDisplayPayload","sourceTargetDetails","toHex","callType","formatedAccount","spec_version","weight","parse","origin","SourceAccount","getChainSubscriptionsKey","sourceChainsMatch","useTransactionNonces","nonceOfBestTargetBlock","setNonceOfBestTargetBlock","nonceOfFinalTargetBlock","setNonceOfFinalTargetBlock","status","COMPLETED","isTransactionCompleted","getLatestReceivedNonce","blockNumber","getBlockHash","blockHash","latestReceivedNonceCall","latestReceivedNonceCallType","finalizedNonce","bestNonce","updateNonces","useTransactionSteps","onComplete","steps","setSteps","deliveryBlock","setDeliveryBlock","finished","setFinished","latestReceivedNonceOnSource","bestBridgedFinalizedBlockOnTarget","bestBlockFinalizedOnTarget","bestBlockOnTarget","stepEvaluator","transactionValue","chainValue","bnChainValue","bnTransactionValue","gte","completionStatus","isCompleted","NOT_STARTED","IN_PROGRESS","sourceTransactionFinalized","block","blockFinalityRelayed","messageDelivered","messageNonce","messageFinalizedOnTarget","sourceConfirmationReceived","chainType","label","labelOnChain","main","success","IconTxStatus","FAILED","IconApiStatus","TransactionHeader","component","card","marginBottom","marginRight","fontWeight","maxWidth","TransactionReceipt","Card","elevation","pt","pb","pl","pr","border","Typography","wordBreak","loader","width","display","TransactionPayload","tab","transactionDisplayProps","RECEIPT","size","CircularProgress","PAYLOAD","DECODED","src","enableClipboard","TransactionSwitchTab","setTab","getColorByState","setTabCallback","TransactionStatus","emptyState","useTransactionPayloadDisplay","payloadDisplay","setPayloadDisplay","TransactionStatusMock","Transactions","shortenItem","drawer","position","top","left","height","paddingLeft","paddingTop","overflow","closeDrawerIcon","background","paper","marginLeft","marginTop","StorageDrawer","useGUIContext","setDrawer","handleDrawerOpen","handleDrawerClose","Fade","in","timeout","enter","exit","IconButton","selectLabel","h4","text","hint","styleAccountCompanion","paddingRight","divider","borderTopLeftRadius","borderTopRightRadius","SelectLabel","bridgesBlue","substrateGray","substrateGreen","paletteLight","common","black","white","default","primary","dark","contrastText","red","disabled","active","grey","allVariants","fontFamily","h1","lineHeight","letterSpacing","h2","h3","body1","button","textTransform","subtitle1","subtitle2","overline","shadows","ui","transition","breakpoints","down","sidebar","zIndex","flexDirection","borderRight","fade","BoxUI","Container","Paper","BoxSidebar","menu","margin","pointerEvents","MenuAction","actions","changeMenu","anchorEl","setAnchorEl","undefined","setId","setOpen","ButtonBase","event","currentTarget","title","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","PaperProps","i","n","isEnabled","bottom","right","statsEntry","alignItems","svg","NetworkSides","sourceSubscriptions","targetSubscriptions","marginY","p","rel","Divider","style","opacity","NetworkStats","Alert","usePrevious","ref","useResetTransactionState","prevAction","DrawerContext","TRANSFER","REMARK","CUSTOM","GUIContextProvider","setAction","ThemeProvider","createMuiTheme","TypeRegistry","useApiConnection","connectionDetails","setApiPromise","setIsReady","setConfigs","ApiPromise","create","err","register","getChainConfigs","values","isEmpty","useDispatchGenericCall","dispatch","execute","useEstimateFee","estimateFeeCallback","payloadInput","payloadType","messageFeeType","lane_id","estimatedFeeCall","estimatedFeeType","loading","usePayload","payloadCallback","addressRaw","consts","version","specVersion","toNumber","useTransactionPreparation","weightInput","isValidCall","setValues","tx","remark","toU8a","u8aToHex","slice","paymentInfo","balances","transfer","isHex","hexToU8a","getValues","useTransactionType","calculateFee","updatePayload","useSendMessage","makeCall","bridgeMessage","sendMessage","options","nonce","sourceAccount","isInjected","web3FromSource","injector","signer","signAndSend","events","CREATED","isBroadcast","isInBlock","forEach","method","toArray","getBlock","asInBlock","header","isFinalized","asFinalized","sendLaneMessage","moment","isButtonDisabled","container","minHeight","EstimatedFee","srcChainDecimals","amount","setAmount","estFee","t","Math","abs","parseFloat","transformToBaseUnit","feeLabel","useDebounceState","initialValue","wait","transformCallback","dispatchCallback","setValue","debounced","setDebounced","previousDebounced","setDebouncedCallback","useMemo","debounce","setValueCallback","transformedValue","CustomCall","decoded","setDecoded","currentCustomCallInput","setCustomCallInput","customCallDebouncedInput","currentWeightInput","setWeightInput","weightDebouncedInput","setError","onChange","onWeightChange","TextField","placeholder","helperText","statusFunc","ExtensionAccountCheck","msg","severity","Remark","currentInput","setRemarkInput","remarkDebouncedInput","multiline","rows","useAccounts","setCurrentAccount","useApiBalance","isDerived","whiteSpace","Balance","filter","emptyAddress","AccountIdenticon","onCopy","ctx","AddressKind","missingAddress","tooltipIcon","AccountDisplay","addressKind","friendlyName","hideAddress","withTooltip","shortAddress","shorterItem","displayName","displayText","Tooltip","arrow","placement","interactive","Account","COMPANION","networkHeading","paddingBottom","borderTop","selectAccountMainItem","accountMain","borderBottomLeftRadius","borderBottomRightRadius","accountCompanion","Sender","chains","setChains","renderAccounts","items","formatedAddress","icon","formatAccounts","MenuItem","getName","AccountSelected","Select","disableUnderline","renderValue","isNull","CloseButton","styled","SnackBar","useSnackbar","enqueueSnackbar","closeSnackbar","TokenSymbol","InputAdornment","ReceiverInput","onReceiverChange","prevTargetChain","useReceiver","addressInput","InputBase","autoComplete","selectAccountCompanionItem","cursor","GenericAccount","selected","setSelected","nativeAddress","nativeState","companionState","looseHelperAccount","setNativeAsTargetOrClear","setNativeAsTarget","NATIVE","setCompanionAsTarget","shortGenericAddress","useGenericAccount","toLowerCase","ReceiverDerivedAccount","shortUnformattedReceiver","Receiver","inputAmount","textAlign","Transfer","amountNotCorrect","setAmountNotCorrect","setInput","InputProps","endAdornment","ActionComponents","Main","choice","x","chain1","customTypesChain1","chain2","customTypesChain2","substrateProviders","connectionDetails1","connectionDetails2","App","chainsConnections","chain1Configs","polkadotjsUrl1","apiConnection1","chain2Configs","polkadotjsUrl2","apiConnection2","setConnections","apiReady","setApiReady","chainName1","chainName2","useConnections","Backdrop","path","v","checkExpectedVariables","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a5b650c.chunk.js","sourcesContent":["// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nconst expectedVariables = [\n  'REACT_APP_CHAIN_1_SUBSTRATE_PROVIDER',\n  'REACT_APP_CHAIN_2_SUBSTRATE_PROVIDER',\n  'REACT_APP_LANE_ID',\n  'REACT_APP_KEYRING_DEV_LOAD_ACCOUNTS',\n  'REACT_APP_IS_DEVELOPMENT'\n];\n\nconst optionalVariables = [\n  'REACT_APP_CHAIN_1_CUSTOM_TYPES_URL',\n  'REACT_APP_CHAIN_2_CUSTOM_TYPES_URL',\n  'REACT_APP_CHAIN_1_CUSTOM_HASHER',\n  'REACT_APP_CHAIN_2_CUSTOM_HASHER'\n];\n\nconst checkExpectedVariables = () => {\n  for (const v of expectedVariables) {\n    if (!process.env[v]) {\n      throw new Error(`Missing ${v} variable`);\n    }\n  }\n  return true;\n};\n\nconst checkUnexpectedVariables = () => {\n  for (const v of Object.keys(process.env)) {\n    if (!expectedVariables.includes(v) && !optionalVariables.includes(v)) {\n      throw new Error(`Unexpected ${v} variable found.`);\n    }\n  }\n  return true;\n};\n\nconst checkEnvVariable = (variable: string) => {\n  const envVariable = process.env[variable];\n  if (!envVariable) {\n    throw new Error(`Env Variable ${variable} was not defined`);\n  }\n  return envVariable;\n};\n\nexport { checkEnvVariable, checkExpectedVariables, checkUnexpectedVariables };\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nexport const SOURCE = 'sourceChain';\nexport const TARGET = 'targetChain';\n\nexport const CHAIN_1 = '1';\nexport const CHAIN_2 = '2';\n\nexport const INCORRECT_FORMAT = 'INCORRECT_FORMAT';\nexport const GENERIC = 'GENERIC';\nexport const GENERIC_SUBSTRATE_PREFIX = 42;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { u8aConcat } from '@polkadot/util';\nimport { blake2AsU8a, keccakAsU8a } from '@polkadot/util-crypto';\n\ntype Hasher = { [index: string]: (data: Uint8Array) => Uint8Array } | null;\n\nfunction blake2Keccak256Hasher(data: Uint8Array) {\n  return u8aConcat(blake2AsU8a(data), keccakAsU8a(data));\n}\n\nconst hashers: Hasher = {\n  blake2Keccak256Hasher\n};\n\nexport default hashers;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nenum SourceTargetActionsTypes {\n  SWAP_CHAINS = 'SWAP_CHAINS'\n}\n\nconst switchChains = (chain: string) => ({\n  payload: { chain },\n  type: SourceTargetActionsTypes.SWAP_CHAINS\n});\n\nconst SourceTargetActionsCreators = {\n  switchChains\n};\n\nexport { SourceTargetActionsTypes, SourceTargetActionsCreators };\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { WsProvider } from '@polkadot/api';\nimport { ApiOptions } from '@polkadot/api/types';\n\nimport { checkEnvVariable } from '../util/envVariablesValidations';\nimport { CHAIN_1, CHAIN_2 } from '../constants';\nimport { createPolkadotJsUrl } from '../util/createPolkadotJsUrl';\nimport { ConnectionChainInformation } from '../types/sourceTargetTypes';\nimport customTypesChain1 from './substrateCustomTypes/chain1.json';\nimport customTypesChain2 from './substrateCustomTypes/chain2.json';\nimport hashers from './chainsSetup/customHashers';\n\nconst getProviderInfo = (chainNumber: string, types: ApiOptions['types']) => {\n  const providedHasher = process.env[`REACT_APP_CHAIN_${chainNumber}_CUSTOM_HASHER`];\n  const providerUrl = checkEnvVariable(`REACT_APP_CHAIN_${chainNumber}_SUBSTRATE_PROVIDER`);\n\n  const hasher = (providedHasher && hashers && hashers[providedHasher]) || null;\n\n  const polkadotjsUrl = createPolkadotJsUrl(types!, providerUrl);\n  return {\n    hasher,\n    provider: new WsProvider(providerUrl),\n    polkadotjsUrl,\n    types\n  };\n};\n\nexport const substrateProviders = (): ConnectionChainInformation[] => {\n  const chain1 = getProviderInfo(CHAIN_1, customTypesChain1);\n  const chain2 = getProviderInfo(CHAIN_2, customTypesChain2);\n\n  return [\n    {\n      chainNumber: CHAIN_1,\n      hasher: chain1.hasher,\n      polkadotjsUrl: chain1.polkadotjsUrl,\n      types: chain1.types,\n      provider: chain1.provider\n    },\n    {\n      chainNumber: CHAIN_2,\n      hasher: chain2.hasher,\n      polkadotjsUrl: chain2.polkadotjsUrl,\n      types: chain2.types,\n      provider: chain2.provider\n    }\n  ];\n};\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { stringToU8a } from '@polkadot/util';\nimport { base64Encode } from '@polkadot/util-crypto';\nimport { zlibSync } from 'fflate';\n\nexport function createPolkadotJsUrl(types: Record<string, any>, providerUrl: string): string {\n  const jsonU8a = stringToU8a(JSON.stringify(types));\n  const compressed = zlibSync(jsonU8a, { level: 9 });\n  const encoded = base64Encode(compressed);\n\n  return `https://polkadot.js.org/apps/?rpc=${encodeURIComponent(providerUrl)}&types=${encodeURIComponent(encoded)}`;\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { ApiPromise } from '@polkadot/api';\nimport { ApiOptions } from '@polkadot/api/types';\nimport { SourceTargetActionsTypes } from '../actions/sourceTargetActions';\nimport { ProviderInterface } from '@polkadot/rpc-provider/types';\n\nexport interface ApiPromiseConnectionType {\n  api: ApiPromise; // From @polkadot/api\\\n  isApiReady: boolean;\n}\n\nexport interface ConnectionChainInformation {\n  chainNumber: string;\n  hasher: ((data: Uint8Array) => Uint8Array) | null;\n  provider: ProviderInterface;\n  types?: ApiOptions['types'];\n  polkadotjsUrl: string;\n}\n\nexport interface Configs {\n  bridgeIds: { [propName: string]: Array<number> };\n  chainName: string;\n  ss58Format: number;\n}\n\nexport type Connection = {\n  chainName: string;\n  apiConnection: ApiPromiseConnectionType;\n  polkadotjsUrl: string;\n  configs: Configs;\n};\ninterface Payload {\n  [propName: string]: string;\n}\n\nexport type SourceTargetAction = { type: SourceTargetActionsTypes; payload?: Payload };\nexport interface ApiPromiseContextType {\n  api: ApiPromise; // From @polkadot/api\\\n  isApiReady: boolean;\n  polkadotjsUrl: string;\n  configs: Configs;\n}\n\nexport enum ChainDetails {\n  SOURCE = 'sourceChainDetails',\n  TARGET = 'targetChainDetails'\n}\n\nexport interface ChainState {\n  configs: Configs;\n  apiConnection: ApiPromiseConnectionType;\n  chain: string;\n  polkadotjsUrl: string;\n}\n\nexport interface SourceTargetState {\n  [ChainDetails.SOURCE]: ChainState;\n  [ChainDetails.TARGET]: ChainState;\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { SourceTargetActionsTypes } from '../actions/sourceTargetActions';\nimport { ChainDetails, SourceTargetAction, SourceTargetState } from '../types/sourceTargetTypes';\n\nexport default function sourceTargetReducer(state: SourceTargetState, action: SourceTargetAction): SourceTargetState {\n  switch (action.type) {\n    case SourceTargetActionsTypes.SWAP_CHAINS: {\n      if (action.payload!.chain !== state[ChainDetails.SOURCE].chain) {\n        const newState = { ...state };\n\n        newState[ChainDetails.TARGET] = state[ChainDetails.SOURCE];\n        newState[ChainDetails.SOURCE] = state[ChainDetails.TARGET];\n\n        return newState;\n      }\n      return state;\n    }\n    default: {\n      throw new Error(`Unhandled type: ${action.type}`);\n    }\n  }\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useContext, useReducer } from 'react';\nimport sourceTargetReducer from '../reducers/sourceTargetReducer';\nimport { SourceTargetAction, SourceTargetState } from '../types/sourceTargetTypes';\n\nexport interface UpdateSourceTargetContext {\n  dispatchChangeSourceTarget: React.Dispatch<SourceTargetAction>;\n}\n\nexport interface SourceTargetContextProps {\n  connections: SourceTargetState;\n  children: React.ReactElement;\n}\n\nexport const SourceTargetContext: React.Context<SourceTargetState> = React.createContext({} as SourceTargetState);\n\nexport function useSourceTarget() {\n  return useContext(SourceTargetContext);\n}\n\nexport const UpdateSourceTargetContext: React.Context<UpdateSourceTargetContext> = React.createContext(\n  {} as UpdateSourceTargetContext\n);\n\nexport function useUpdateSourceTarget() {\n  return useContext(UpdateSourceTargetContext);\n}\n\nexport function SourceTargetContextProvider({ connections, children }: SourceTargetContextProps): React.ReactElement {\n  const [sourceTargetChains, dispatchChangeSourceTarget] = useReducer(sourceTargetReducer, connections);\n\n  return (\n    <SourceTargetContext.Provider value={sourceTargetChains}>\n      <UpdateSourceTargetContext.Provider value={{ dispatchChangeSourceTarget }}>\n        {children}\n      </UpdateSourceTargetContext.Provider>\n    </SourceTargetContext.Provider>\n  );\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\nimport { useSourceTarget } from '../../contexts/SourceTargetContextProvider';\n\ninterface LoadingStates {\n  areApiReady: boolean;\n  sourceReady: boolean;\n  targetReady: boolean;\n}\n\nexport default function useLoadingApi(): LoadingStates {\n  const {\n    sourceChainDetails: {\n      apiConnection: { isApiReady: isSourceApiReady }\n    },\n    targetChainDetails: {\n      apiConnection: { isApiReady: isTargetApiReady }\n    }\n  } = useSourceTarget();\n\n  return {\n    areApiReady: isSourceApiReady && isTargetApiReady,\n    sourceReady: isSourceApiReady,\n    targetReady: isTargetApiReady\n  };\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\nimport winston from 'winston';\n\nwinston.addColors({\n  debug: 'grey',\n  error: 'red',\n  info: 'green',\n  warn: 'blue'\n});\n\nconst myformat = winston.format.cli({\n  all: true\n});\n\nconst logger = winston.createLogger({\n  transports: [\n    new winston.transports.Console({\n      format: myformat\n    })\n  ]\n});\n\nexport default logger;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { UnsubscribePromise } from '@polkadot/api/types';\nimport { useEffect } from 'react';\nimport logger from '../../util/logger';\n\nexport function useApiSubscription(fn: () => UnsubscribePromise, isReady: boolean): void {\n  useEffect(() => {\n    if (!isReady) {\n      return;\n    }\n\n    try {\n      const unsub = fn();\n      return () => {\n        isReady &&\n          unsub &&\n          unsub\n            .then((u) => u())\n            .catch((e) => {\n              logger.error('error unsubscribing', e);\n            });\n      };\n    } catch (e) {\n      logger.error('error executing subscription', e);\n    }\n  }, [fn, isReady]);\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { useEffect, useRef, useCallback } from 'react';\n\nexport const useIsMounted = () => {\n  const mountedRef = useRef(false);\n  const isMounted = useCallback(() => mountedRef.current, []);\n\n  useEffect(() => {\n    mountedRef.current = true;\n\n    return () => {\n      mountedRef.current = false;\n    };\n  }, []);\n\n  return isMounted;\n};\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport type { Account, BalanceState, DisplayAccounts } from '../types/accountTypes';\nimport type { SourceTargetState } from '../types/sourceTargetTypes';\n\nimport { KeyringPair } from '@polkadot/keyring/types';\n\nenum AccountActionsTypes {\n  SET_ACCOUNT = 'SET_ACCOUNT',\n  SET_ACCOUNTS = 'SET_ACCOUNTS',\n  SET_DISPLAY_SENDER_ACCOUNTS = 'SET_DISPLAY_SENDER_ACCOUNTS',\n  SET_SENDER_BALANCES = 'SET_SENDER_BALANCES'\n}\n\nconst setAccount = (account: Account, sourceTarget: SourceTargetState) => ({\n  payload: { account, sourceTarget },\n  type: AccountActionsTypes.SET_ACCOUNT\n});\n\nconst setSenderBalances = (\n  senderAccountBalance: BalanceState | null,\n  senderCompanionAccountBalance: BalanceState | null\n) => ({\n  payload: { senderAccountBalance, senderCompanionAccountBalance },\n  type: AccountActionsTypes.SET_SENDER_BALANCES\n});\n\nconst setAccounts = (accounts: KeyringPair[]) => ({\n  payload: { accounts },\n  type: AccountActionsTypes.SET_ACCOUNTS\n});\n\nconst setDisplaySenderAccounts = (displaySenderAccounts: DisplayAccounts) => ({\n  payload: { displaySenderAccounts },\n  type: AccountActionsTypes.SET_DISPLAY_SENDER_ACCOUNTS\n});\n\nconst AccountActionCreators = {\n  setAccount,\n  setAccounts,\n  setDisplaySenderAccounts,\n  setSenderBalances\n};\n\nexport { AccountActionsTypes, AccountActionCreators };\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { useCallback, useState, useRef } from 'react';\nimport { useIsMounted } from './useIsMounted';\nimport logger from '../../util/logger';\n\n/**\n * Like React's [useState](https://reactjs.org/docs/hooks-reference.html#usestate)\n * but it makes sure the component that uses this state hook is mounted before updating state\n * @param {D} initialValue\n * @returns {[D, Dispatch<D>]} an array of 2 items\n * the first is the current state, the second is a function that enables\n * updating the state if the component is not mounted\n *\n * D is the type passed when then useMountedState is used\n * e.g. const [pass, setPass] = useMountedState<string>('someString');\n */\nexport const useMountedState = <D>(initialState: D | (() => D)) => {\n  const isMounted = useIsMounted();\n  const counter = useRef(0);\n\n  const [state, setState] = useState<D>(initialState);\n\n  const setMountedState = useCallback(\n    (value: D) => {\n      if (isMounted()) {\n        setState(value);\n      } else {\n        counter.current = counter.current + 1;\n      }\n      if (counter.current > 1) {\n        logger.warn('Unmounted component tried to update their state.');\n      }\n    },\n    [isMounted]\n  );\n\n  return [state, setMountedState] as const;\n};\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { ApiPromise } from '@polkadot/api';\nimport { Balance } from '@polkadot/types/interfaces';\nimport { formatBalance } from '@polkadot/util';\nimport BN from 'bn.js';\nimport { useCallback } from 'react';\nimport useLoadingApi from '../connections/useLoadingApi';\nimport { useApiSubscription } from './useApiSubscription';\nimport { useMountedState } from '../react/useMountedState';\n\ntype State = {\n  chainTokens: string;\n  formattedBalance: string;\n  free: Balance;\n};\n\nconst ZERO = new BN(0);\n\nconst initValues = {\n  chainTokens: '-',\n  formattedBalance: '0',\n  free: new BN(ZERO) as Balance\n};\n\nconst useBalance = (api: ApiPromise, address: string, providedSi: boolean = false): State => {\n  const [state, setState] = useMountedState<State>(initValues);\n  const { areApiReady } = useLoadingApi();\n\n  const getBalanceCall = useCallback(\n    () =>\n      api.query.system.account(address, ({ data }): void => {\n        setState({\n          chainTokens: data.registry.chainTokens[0],\n          formattedBalance: formatBalance(data.free, {\n            decimals: api.registry.chainDecimals[0],\n            withUnit: api.registry.chainTokens[0],\n            withSi: providedSi\n          }),\n          free: data.free\n        });\n      }),\n    [address, api, providedSi, setState]\n  );\n\n  useApiSubscription(getBalanceCall, areApiReady && Boolean(address));\n\n  return state as State;\n};\n\nexport default useBalance;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { ApiPromise } from '@polkadot/api';\nimport { Configs } from '../types/sourceTargetTypes';\n\nexport const getConfigs = async (apiPromise: ApiPromise): Promise<Configs> => {\n  const properties = apiPromise.registry.getChainProperties();\n  const { ss58Format } = properties!;\n  const systemChain = await apiPromise.rpc.system.name();\n  const chainName = systemChain.split(' ')[0];\n  const prop = await apiPromise.rpc.system.properties();\n  const bridgeIds = prop.get('bridgeIds');\n\n  return { bridgeIds, chainName, ss58Format: parseInt(ss58Format.toString()) };\n};\n\nexport const getBridgeId = (configs: Configs, chainName: string): number[] => {\n  const bridgeId = configs?.bridgeIds[chainName];\n\n  if (!bridgeId) {\n    throw new Error(\n      `Missing bridgeId for ${chainName} in bridge configuration of ${configs.chainName}. Add 'bridgeIds' to the chain spec.`\n    );\n  }\n\n  return bridgeId;\n};\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { compactAddLength, stringToU8a } from '@polkadot/util';\nimport { blake2AsHex, decodeAddress, encodeAddress } from '@polkadot/util-crypto';\n\nconst accountDerivation = 'pallet-bridge/account-derivation/account';\n\ninterface Data {\n  ss58Format: number;\n  bridgeId: number[];\n  address: string;\n}\n\nexport default function getDeriveAccount({ ss58Format = 42, bridgeId, address }: Data): string {\n  if (!address) {\n    return address;\n  }\n  const input = [...compactAddLength(stringToU8a(accountDerivation)), ...bridgeId, ...decodeAddress(address)];\n  return encodeAddress(blake2AsHex(Uint8Array.from(input)), ss58Format);\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\nimport { AccountActionsTypes } from '../actions/accountActions';\nimport type { AccountsActionType, AccountState } from '../types/accountTypes';\nimport { getBridgeId } from '../util/getConfigs';\nimport getDeriveAccount from '../util/getDeriveAccount';\n\nexport default function accountReducer(state: AccountState, action: AccountsActionType): AccountState {\n  switch (action.type) {\n    case AccountActionsTypes.SET_ACCOUNT: {\n      const { account, sourceTarget } = action.payload;\n      const {\n        targetChainDetails: { configs },\n        sourceChainDetails: {\n          configs: { chainName: sourceChainName }\n        }\n      } = sourceTarget;\n\n      const toDerive = {\n        ss58Format: configs.ss58Format,\n        address: account?.address || '',\n        bridgeId: getBridgeId(configs, sourceChainName)\n      };\n      const companionAccount = getDeriveAccount(toDerive);\n\n      return { ...state, account, companionAccount };\n    }\n    case AccountActionsTypes.SET_SENDER_BALANCES:\n      return {\n        ...state,\n        senderAccountBalance: action.payload.senderAccountBalance,\n        senderCompanionAccountBalance: action.payload.senderCompanionAccountBalance\n      };\n    case AccountActionsTypes.SET_ACCOUNTS:\n      return { ...state, accounts: action.payload.accounts };\n    case AccountActionsTypes.SET_DISPLAY_SENDER_ACCOUNTS:\n      return { ...state, displaySenderAccounts: action.payload.displaySenderAccounts };\n    default:\n      throw new Error(`Unknown type: ${action.type}`);\n  }\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport type { Payload } from '../types/messageTypes';\n\nenum MessageActionsTypes {\n  TRIGGER_MESSAGE = 'TRIGGER_MESSAGE',\n  RESET_MESSAGE = 'RESET_MESSAGE'\n}\n\nconst triggerInfoMessage = (payload: Payload) => ({\n  payload: { message: payload.message, variant: 'info' },\n  type: MessageActionsTypes.TRIGGER_MESSAGE\n});\n\nconst triggerSuccessMessage = (payload: Payload) => ({\n  payload: { message: payload.message, variant: 'success' },\n  type: MessageActionsTypes.TRIGGER_MESSAGE\n});\n\nconst triggerErrorMessage = (payload: Payload) => ({\n  payload: { message: payload.message, variant: 'error' },\n  type: MessageActionsTypes.TRIGGER_MESSAGE\n});\n\nconst triggerWarningMessage = (payload: Payload) => ({\n  payload: { message: payload.message, variant: 'warning' },\n  type: MessageActionsTypes.TRIGGER_MESSAGE\n});\n\nconst clearMessage = () => ({\n  payload: {},\n  type: MessageActionsTypes.RESET_MESSAGE\n});\n\nconst MessageActionsCreators = {\n  clearMessage,\n  triggerErrorMessage,\n  triggerInfoMessage,\n  triggerSuccessMessage,\n  triggerWarningMessage\n};\n\nexport { MessageActionsTypes, MessageActionsCreators };\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { MessageActionsTypes } from '../actions/messageActions';\nimport type { MessagesActionType, MessageState } from '../types/messageTypes';\n\nexport default function messageReducer(state: MessageState, action: MessagesActionType): MessageState {\n  switch (action.type) {\n    case MessageActionsTypes.RESET_MESSAGE:\n      return { ...state, message: null, variant: null };\n    case MessageActionsTypes.TRIGGER_MESSAGE:\n      return { ...state, message: action.payload.message, variant: action.payload.variant };\n\n    default:\n      throw new Error(`Unknown type: ${action.type}`);\n  }\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useContext, useReducer } from 'react';\n\nimport messageReducer from '../reducers/messageReducer';\nimport { MessageContextType, MessagesActionType } from '../types/messageTypes';\n\ninterface MessageContextProviderProps {\n  children: React.ReactElement;\n}\n\nexport interface UpdateMessageContext {\n  dispatchMessage: React.Dispatch<MessagesActionType>;\n}\n\nexport const MessageContext: React.Context<MessageContextType> = React.createContext({} as MessageContextType);\n\nexport const UpdateMessageContext: React.Context<UpdateMessageContext> = React.createContext(\n  {} as UpdateMessageContext\n);\n\nexport function useMessageContext() {\n  return useContext(MessageContext);\n}\n\nexport function useUpdateMessageContext() {\n  return useContext(UpdateMessageContext);\n}\n\nexport function MessageContextProvider(props: MessageContextProviderProps): React.ReactElement {\n  const { children = null } = props;\n\n  const [message, dispatchMessage] = useReducer(messageReducer, {\n    message: null,\n    variant: null\n  });\n\n  return (\n    <MessageContext.Provider value={message}>\n      <UpdateMessageContext.Provider value={{ dispatchMessage }}>{children}</UpdateMessageContext.Provider>\n    </MessageContext.Provider>\n  );\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport type { KeyringPair } from '@polkadot/keyring/types';\n\nexport interface KeyringContextType {\n  accountExists: boolean;\n  extensionExists: boolean;\n  keyringPairs: Array<KeyringPair>;\n  keyringPairsReady: boolean;\n}\n\nexport enum KeyringStatuses {\n  INIT = 'INIT',\n  LOADING = 'LOADING',\n  READY = 'READY',\n  ERROR = 'ERROR'\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\nimport { web3Accounts, web3Enable } from '@polkadot/extension-dapp';\nimport type { KeyringPair } from '@polkadot/keyring/types';\nimport keyring from '@polkadot/ui-keyring';\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\n\nimport { MessageActionsCreators } from '../actions/messageActions';\nimport { useUpdateMessageContext } from '../contexts/MessageContext';\nimport { KeyringContextType, KeyringStatuses } from '../types/keyringTypes';\nimport logger from '../util/logger';\n\ninterface KeyringContextProviderProps {\n  children: React.ReactElement;\n}\n\nexport const KeyringContext: React.Context<KeyringContextType> = React.createContext({} as KeyringContextType);\nconst isDevelopment = process.env.REACT_APP_IS_DEVELOPMENT === 'true';\nconst loadDevAccounts = process.env.REACT_APP_KEYRING_DEV_LOAD_ACCOUNTS === 'true';\n\nexport function useKeyringContext() {\n  return useContext(KeyringContext);\n}\n\nexport function KeyringContextProvider(props: KeyringContextProviderProps): React.ReactElement {\n  const { children = null } = props;\n  const [keyringStatus, setKeyringStatus] = useState(KeyringStatuses.INIT);\n  const { dispatchMessage } = useUpdateMessageContext();\n  const [keyringPairs, setKeyringPairs] = useState<Array<KeyringPair>>([]);\n  const [keyringPairsReady, setkeyringPairsReady] = useState<boolean>(false);\n  const [extensionExists, setExtensionExists] = useState<boolean>(false);\n  const [accountExists, setAccountExists] = useState<boolean>(false);\n\n  const loadAccounts = useCallback(() => {\n    const asyncLoadAccounts = async () => {\n      setKeyringStatus(KeyringStatuses.LOADING);\n      try {\n        const extExists = await web3Enable('Substrate Bridges UI');\n        if (extExists.length === 0 && !isDevelopment) {\n          return;\n        } else {\n          setExtensionExists(true);\n        }\n        let allAccounts = await web3Accounts();\n        allAccounts?.length && setAccountExists(true);\n        allAccounts = allAccounts.map(({ address, meta }) => ({\n          address,\n          meta: { ...meta, name: `${meta.name}` }\n        }));\n\n        keyring.loadAll({ isDevelopment: loadDevAccounts }, allAccounts);\n        setKeyringStatus(KeyringStatuses.READY);\n      } catch (e) {\n        dispatchMessage(MessageActionsCreators.triggerErrorMessage({ message: e }));\n        logger.error(e);\n        setKeyringStatus(KeyringStatuses.ERROR);\n      }\n    };\n\n    if (keyringStatus === KeyringStatuses.LOADING || keyringStatus === KeyringStatuses.READY) return;\n\n    asyncLoadAccounts();\n  }, [dispatchMessage, keyringStatus]);\n\n  useEffect(() => {\n    if (keyringStatus === KeyringStatuses.INIT) {\n      loadAccounts();\n    }\n  }, [keyringStatus, loadAccounts]);\n\n  useEffect(() => {\n    if (keyringStatus === KeyringStatuses.READY) {\n      const keyringOptions = keyring.getPairs();\n      setKeyringPairs(keyringOptions);\n      setkeyringPairsReady(true);\n    }\n  }, [keyringStatus]);\n\n  return (\n    <KeyringContext.Provider value={{ accountExists, extensionExists, keyringPairs, keyringPairsReady }}>\n      {children}\n    </KeyringContext.Provider>\n  );\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nexport interface SubstrateDynamicNames {\n  bridgedGrandpaChain: string;\n  bridgedMessages: string;\n  estimatedFeeMethodName: string;\n  latestReceivedNonceMethodName: string;\n  storageKey: string;\n}\n\nexport function getSubstrateDynamicNames(key: string): SubstrateDynamicNames {\n  const bridgedGrandpaChain = `bridge${key}Grandpa`;\n  const bridgedMessages = `bridge${key}Messages`;\n  const estimatedFeeMethodName = `To${key}OutboundLaneApi_estimate_message_delivery_and_dispatch_fee`;\n  const latestReceivedNonceMethodName = `From${key}InboundLaneApi_latest_received_nonce`;\n\n  const storageKey = `${key}-bridge-ui-transactions`;\n\n  return {\n    bridgedGrandpaChain,\n    bridgedMessages,\n    estimatedFeeMethodName,\n    latestReceivedNonceMethodName,\n    storageKey\n  };\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { useCallback } from 'react';\nimport { GENERIC, GENERIC_SUBSTRATE_PREFIX } from '../../constants';\nimport { useSourceTarget } from '../../contexts/SourceTargetContextProvider';\nimport { getSubstrateDynamicNames } from '../../util/getSubstrateDynamicNames';\n\nconst useChainGetters = () => {\n  const {\n    sourceChainDetails: {\n      apiConnection: { api: sourceApi, isApiReady: sourceIsApiReady },\n      chain: sourceChain,\n      configs: { ss58Format: sourceSS58Format }\n    },\n    targetChainDetails: {\n      apiConnection: { api: targetApi, isApiReady: targetIsApiReady },\n      chain: targetChain,\n      configs: { ss58Format: targetSS58Format }\n    }\n  } = useSourceTarget();\n\n  const getValuesByChain = useCallback(\n    (chain: string) => {\n      switch (chain) {\n        case sourceChain:\n          return {\n            ss58Format: sourceSS58Format,\n            api: sourceApi,\n            isApiReady: sourceIsApiReady,\n            substrateValues: getSubstrateDynamicNames(targetChain)\n          };\n        case targetChain:\n          return {\n            ss58Format: targetSS58Format,\n            api: targetApi,\n            isApiReady: targetIsApiReady,\n            substrateValues: getSubstrateDynamicNames(sourceChain)\n          };\n        default:\n          throw new Error(`Unknown type: ${chain}`);\n      }\n    },\n    [\n      sourceApi,\n      sourceChain,\n      sourceIsApiReady,\n      sourceSS58Format,\n      targetApi,\n      targetChain,\n      targetIsApiReady,\n      targetSS58Format\n    ]\n  );\n\n  const getSS58PrefixByChain = (chain: string) => {\n    switch (chain) {\n      case GENERIC:\n        return GENERIC_SUBSTRATE_PREFIX;\n      case targetChain:\n        return targetSS58Format;\n      case sourceChain:\n        return sourceSS58Format;\n      default:\n        throw new Error(`Unknown type: ${chain}`);\n    }\n  };\n\n  return { getValuesByChain, getSS58PrefixByChain };\n};\n\nexport default useChainGetters;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { useCallback } from 'react';\nimport { Text, Bytes } from '@polkadot/types';\nimport { Codec } from '@polkadot/types/types';\nimport { ApiCallsContextType } from '../../types/apiCallsTypes';\nimport useChainGetters from '../chain/useChainGetters';\nimport { formatBalance } from '@polkadot/util';\nimport { useSourceTarget } from '../../contexts/SourceTargetContextProvider';\nimport { getBridgeId } from '../../util/getConfigs';\nimport getDeriveAccount from '../../util/getDeriveAccount';\nimport { useKeyringContext } from '../../contexts/KeyringContextProvider';\nimport { ApiPromise } from '@polkadot/api';\nimport { encodeAddress } from '@polkadot/util-crypto';\nimport { AccountActionCreators } from '../../actions/accountActions';\nimport { BalanceState } from '../../types/accountTypes';\n\nconst useApiCalls = (): ApiCallsContextType => {\n  const { sourceChainDetails, targetChainDetails } = useSourceTarget();\n  const { keyringPairs, keyringPairsReady } = useKeyringContext();\n  const { getValuesByChain } = useChainGetters();\n\n  const createType = useCallback(\n    (chain, type, data) => {\n      const { api } = getValuesByChain(chain);\n      return api.registry.createType(type, data);\n    },\n    [getValuesByChain]\n  );\n\n  const stateCall = useCallback(\n    (chain: string, methodName: string | Text, data: string | Uint8Array | Bytes, at) => {\n      const { api } = getValuesByChain(chain);\n\n      const params: [string | Text, string | Uint8Array | Bytes] = [methodName, data];\n      if (at) {\n        params.push(at);\n      }\n\n      return api.rpc.state.call<Codec>(...params);\n    },\n    [getValuesByChain]\n  );\n\n  const updateSenderAccountsInformation = useCallback(\n    async (dispatchAccount) => {\n      const formatBalanceAddress = (data: any, api: ApiPromise): BalanceState => {\n        return {\n          chainTokens: data.registry.chainTokens[0],\n          formattedBalance: formatBalance(data.free, {\n            decimals: api.registry.chainDecimals[0],\n            withUnit: api.registry.chainTokens[0],\n            withSi: true\n          }),\n          free: data.free\n        };\n      };\n\n      if (!keyringPairsReady || !keyringPairs.length) {\n        return {};\n      }\n\n      const getAccountInformation = async (sourceRole: any, targetRole: any) => {\n        const {\n          apiConnection: { api: sourceApi },\n          chain: sourceChain,\n          configs: sourceConfigs\n        } = sourceRole;\n        const {\n          apiConnection: { api: targetApi },\n          configs: targetConfigs\n        } = targetRole;\n\n        const accounts = await Promise.all(\n          keyringPairs.map(async ({ address, meta }) => {\n            const sourceAddress = encodeAddress(address, sourceConfigs.ss58Format);\n            const toDerive = {\n              ss58Format: targetConfigs.ss58Format,\n              address: sourceAddress || '',\n              bridgeId: getBridgeId(targetConfigs, sourceChain)\n            };\n            const { data } = await sourceApi.query.system.account(sourceAddress);\n            const sourceBalance = formatBalanceAddress(data, sourceApi);\n\n            const companionAddress = getDeriveAccount(toDerive);\n            const { data: dataCompanion } = await targetApi.query.system.account(companionAddress);\n            const targetBalance = formatBalanceAddress(dataCompanion, targetApi);\n\n            const name = (meta.name as string).toLocaleUpperCase();\n\n            return {\n              account: { address: sourceAddress, balance: sourceBalance, name },\n              companionAccount: { address: companionAddress, balance: targetBalance, name }\n            };\n          })\n        );\n\n        return accounts;\n      };\n\n      const sourceAddresses = await getAccountInformation(sourceChainDetails, targetChainDetails);\n      const targetAddresses = await getAccountInformation(targetChainDetails, sourceChainDetails);\n\n      dispatchAccount(\n        AccountActionCreators.setDisplaySenderAccounts({\n          [sourceChainDetails.chain]: sourceAddresses,\n          [targetChainDetails.chain]: targetAddresses\n        })\n      );\n    },\n    [keyringPairs, keyringPairsReady, sourceChainDetails, targetChainDetails]\n  );\n\n  return { createType, stateCall, updateSenderAccountsInformation };\n};\n\nexport default useApiCalls;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useContext } from 'react';\nimport { ApiCallsContextType } from '../types/apiCallsTypes';\nimport useApiCalls from '../hooks/api/useApiCalls';\n\ninterface ApiCallsContextProviderProps {\n  children: React.ReactElement;\n}\n\nexport const ApiCallsContext: React.Context<ApiCallsContextType> = React.createContext({} as ApiCallsContextType);\n\nexport function useApiCallsContext() {\n  return useContext(ApiCallsContext);\n}\n\nexport function ApiCallsContextProvider(props: ApiCallsContextProviderProps): React.ReactElement {\n  const apiCalls = useApiCalls();\n  const { children = null } = props;\n\n  return <ApiCallsContext.Provider value={apiCalls}>{children}</ApiCallsContext.Provider>;\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { useEffect, useReducer } from 'react';\nimport { useSourceTarget } from '../../contexts/SourceTargetContextProvider';\nimport useBalance from '../subscriptions/useBalance';\nimport { AccountActionCreators } from '../../actions/accountActions';\nimport accountReducer from '../../reducers/accountReducer';\nimport { useKeyringContext } from '../../contexts/KeyringContextProvider';\nimport { DisplayAccounts } from '../../types/accountTypes';\nimport { useApiCallsContext } from '../../contexts/ApiCallsContextProvider';\n\nconst useAccountsContextSetUp = () => {\n  const {\n    targetChainDetails: {\n      apiConnection: { api: targetApi }\n    },\n    sourceChainDetails: {\n      apiConnection: { api: sourceApi }\n    }\n  } = useSourceTarget();\n\n  const { keyringPairs, keyringPairsReady } = useKeyringContext();\n  const { updateSenderAccountsInformation } = useApiCallsContext();\n  const [accountState, dispatchAccount] = useReducer(accountReducer, {\n    account: null,\n    accounts: [],\n    companionAccount: null,\n    senderAccountBalance: null,\n    senderCompanionAccountBalance: null,\n    displaySenderAccounts: {} as DisplayAccounts\n  });\n\n  const accountBalance = useBalance(sourceApi, accountState.account?.address || '', true);\n  const companionBalance = useBalance(targetApi, accountState.companionAccount || '', true);\n\n  useEffect(() => {\n    dispatchAccount(AccountActionCreators.setSenderBalances(accountBalance, companionBalance));\n  }, [accountBalance, companionBalance, dispatchAccount]);\n\n  useEffect(() => {\n    if (keyringPairsReady && keyringPairs.length) {\n      dispatchAccount(AccountActionCreators.setAccounts(keyringPairs));\n      // This initial load might be temporary or it might change based on what it was disscussed in issue #224\n      updateSenderAccountsInformation(dispatchAccount);\n    }\n  }, [keyringPairsReady, keyringPairs, dispatchAccount, updateSenderAccountsInformation]);\n\n  return { accountState, dispatchAccount };\n};\n\nexport default useAccountsContextSetUp;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useContext } from 'react';\nimport useAccountsContextSetUp from '../hooks/context/useAccountsContextSetUp';\n\nimport { AccountState, AccountsActionType } from '../types/accountTypes';\n\ninterface AccountContextProviderProps {\n  children: React.ReactElement;\n}\n\nexport interface UpdateAccountContext {\n  dispatchAccount: React.Dispatch<AccountsActionType>;\n}\n\nexport const AccountContext: React.Context<AccountState> = React.createContext({} as AccountState);\n\nexport const UpdateAccountContext: React.Context<UpdateAccountContext> = React.createContext(\n  {} as UpdateAccountContext\n);\n\nexport function useAccountContext() {\n  return useContext(AccountContext);\n}\n\nexport function useUpdateAccountContext() {\n  return useContext(UpdateAccountContext);\n}\n\nexport function AccountContextProvider(props: AccountContextProviderProps): React.ReactElement {\n  const { children = null } = props;\n  const { accountState, dispatchAccount } = useAccountsContextSetUp();\n\n  return (\n    <AccountContext.Provider value={accountState}>\n      <UpdateAccountContext.Provider value={{ dispatchAccount }}>{children}</UpdateAccountContext.Provider>\n    </AccountContext.Provider>\n  );\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { TransactionActionTypes } from '../actions/transactionActions';\nimport { ChainState } from './sourceTargetTypes';\nimport BN from 'bn.js';\n\nexport interface Payload {\n  [propName: string]: any;\n}\n\nexport interface UpdatedTransactionStatusType {\n  [propName: string]: any;\n}\n\nexport enum TransactionStatusEnum {\n  NOT_STARTED = 'NOT_STARTED',\n  CREATED = 'CREATED',\n  IN_PROGRESS = 'IN_PROGRESS',\n  COMPLETED = 'COMPLETED',\n  FAILED = 'FAILED'\n}\n\nexport enum SwitchTabEnum {\n  RECEIPT = 'RECEIPT',\n  PAYLOAD = 'PAYLOAD',\n  DECODED = 'DECODED'\n}\nexport interface TransactionPayload {\n  call: Uint8Array;\n  origin: {\n    SourceAccount: string;\n  };\n  spec_version: number;\n  weight: number;\n}\n\nexport interface TransactionDisplayPayload {\n  call: Object;\n  origin: Object;\n  spec_version: string;\n  weight: string;\n}\n\nexport interface TransactionStatusType extends UpdatedTransactionStatusType {\n  input: string;\n  sourceChain: string;\n  targetChain: string;\n  sourceAccount: null | string;\n  receiverAddress: null | string;\n  type: string;\n  status: TransactionStatusEnum;\n}\n\nexport interface TransactionState {\n  senderAccount: string | null;\n  transferAmount: BN | null;\n  transferAmountError: string | null;\n  estimatedFee: string | null;\n  estimatedFeeError: string | null;\n  estimatedFeeLoading: boolean;\n  receiverAddress: string | null;\n  unformattedReceiverAddress: string | null;\n  derivedReceiverAccount: string | null;\n  genericReceiverAccount: string | null;\n  transactions: Array<TransactionStatusType>;\n  transactionDisplayPayload: TransactionDisplayPayload;\n  transactionRunning: boolean;\n  transactionReadyToExecute: boolean;\n  addressValidationError: string | null;\n  showBalance: boolean;\n  formatFound: string | null;\n  payload: TransactionPayload | null;\n  payloadError: string | null;\n  payloadHex: string | null;\n}\n\nexport type TransactionsActionType = { type: TransactionActionTypes; payload: Payload };\n\nexport enum TransactionTypes {\n  CUSTOM = 'CUSTOM',\n  TRANSFER = 'TRANSFER',\n  REMARK = 'REMARK'\n}\n\nexport enum EvalMessages {\n  GIBBERISH = 'Input is not correct. Use numbers, floats or expression (e.g. 1k, 1.3m)',\n  ZERO = 'You cannot send 0 funds',\n  SUCCESS = '',\n  SYMBOL_ERROR = 'Provided symbol is not correct',\n  GENERAL_ERROR = 'Check your input. Something went wrong'\n}\n\nexport interface Step {\n  id: string;\n  chainType: string;\n  label: string;\n  labelOnChain?: string;\n  status: keyof typeof TransactionStatusEnum;\n}\n\nexport interface ReceiverPayload {\n  unformattedReceiverAddress: string | null;\n  sourceChainDetails: ChainState;\n  targetChainDetails: ChainState;\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { useEffect, useState } from 'react';\n\nconst useLocalStorage = (localStorageKey: string): [string, React.Dispatch<React.SetStateAction<string>>] => {\n  const [localValue, setLocalValue] = useState(localStorage.getItem(localStorageKey) || '');\n\n  useEffect((): void => {\n    localStorage.setItem(localStorageKey, localValue);\n  }, [localValue, localStorageKey]);\n\n  return [localValue, setLocalValue];\n};\n\nexport default useLocalStorage;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {\n  TransactionStatusType,\n  UpdatedTransactionStatusType,\n  ReceiverPayload,\n  TransactionPayload\n} from '../types/transactionTypes';\n\nenum TransactionActionTypes {\n  SET_TRANSFER_AMOUNT = 'SET_TRANSFER_AMOUNT',\n  SET_ESTIMATED_FEE = 'SET_ESTIMATED_FEE',\n  SET_PAYLOAD = 'SET_PAYLOAD',\n  SET_PAYLOAD_ERROR = 'SET_PAYLOAD_ERROR',\n  SET_RECEIVER = 'SET_RECEIVER',\n  SET_RECEIVER_ADDRESS = 'SET_RECEIVER_ADDRESS',\n  SET_RECEIVER_VALIDATION = 'SET_RECEIVER_VALIDATION',\n  SET_SENDER_ACCOUNT = 'SET_SENDER_ACCOUNT',\n  CREATE_TRANSACTION_STATUS = 'CREATE_TRANSACTION_STATUS',\n  UPDATE_CURRENT_TRANSACTION_STATUS = 'UPDATE_CURRENT_TRANSACTION_STATUS',\n  SET_TRANSACTION_COMPLETED = 'SET_TRANSACTION_COMPLETED',\n  SET_TRANSACTION_RUNNING = 'SET_TRANSACTION_RUNNING',\n  RESET = 'RESET'\n}\n\nconst setTransferAmount = (transferAmount: string | null, chainDecimals?: number) => {\n  return {\n    payload: { transferAmount, chainDecimals },\n    type: TransactionActionTypes.SET_TRANSFER_AMOUNT\n  };\n};\n\nconst setEstimatedFee = (\n  estimatedFeeError: string | null,\n  estimatedFee: string | null,\n  estimatedFeeLoading: boolean\n) => {\n  return {\n    payload: { estimatedFee, estimatedFeeError, estimatedFeeLoading },\n    type: TransactionActionTypes.SET_ESTIMATED_FEE\n  };\n};\n\nconst setPayload = (payloadError: string | null, payload: TransactionPayload | null) => ({\n  payload: { payload, payloadError },\n  type: TransactionActionTypes.SET_PAYLOAD\n});\n\nconst setReceiverAddress = (receiverAddress: string | null) => ({\n  payload: { receiverAddress },\n  type: TransactionActionTypes.SET_RECEIVER_ADDRESS\n});\n\nconst setReceiver = (receiverPayload: ReceiverPayload) => ({\n  payload: { receiverPayload },\n  type: TransactionActionTypes.SET_RECEIVER\n});\n\nconst createTransactionStatus = (initialTransaction: TransactionStatusType) => {\n  return {\n    payload: { initialTransaction },\n    type: TransactionActionTypes.CREATE_TRANSACTION_STATUS\n  };\n};\n\nconst updateTransactionStatus = (updatedValues: UpdatedTransactionStatusType, id: string) => {\n  return {\n    payload: { id, updatedValues },\n    type: TransactionActionTypes.UPDATE_CURRENT_TRANSACTION_STATUS\n  };\n};\n\nconst reset = () => ({\n  payload: {},\n  type: TransactionActionTypes.RESET\n});\n\nconst setTransactionRunning = (transactionRunning: boolean) => ({\n  payload: { transactionRunning },\n  type: TransactionActionTypes.SET_TRANSACTION_RUNNING\n});\n\nconst setSenderAccount = (senderAccount: string | null) => ({\n  payload: { senderAccount },\n  type: TransactionActionTypes.SET_SENDER_ACCOUNT\n});\n\nconst TransactionActionCreators = {\n  setSenderAccount,\n  setReceiverAddress,\n  setReceiver,\n  setTransferAmount,\n  setEstimatedFee,\n  setTransactionRunning,\n  createTransactionStatus,\n  updateTransactionStatus,\n  setPayload,\n  reset\n};\n\nexport { TransactionActionCreators, TransactionActionTypes };\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { Box, Button, ButtonProps } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ForumIcon from '@material-ui/icons/Forum';\nimport React from 'react';\n\nconst useStyles = makeStyles((theme) => ({\n  submit: {\n    padding: theme.spacing(2),\n    borderRadius: theme.spacing(1.75)\n  },\n  contact: {\n    backgroundColor: 'transparent',\n    '&:hover': {\n      backgroundColor: theme.palette.secondary.light\n    }\n  },\n  switchMode: {\n    fontSize: theme.typography.body2.fontSize\n  },\n  drawerMenu: {\n    justifyContent: 'end',\n    '&.MuiButton-textPrimary': {\n      backgroundColor: theme.palette.secondary.light\n    }\n  }\n}));\n\nexport const ButtonExt = ({\n  children,\n  startIcon = <ForumIcon />,\n  variant = 'contained',\n  disableElevation = true,\n  href = 'https://github.com/paritytech/parity-bridges-ui/issues',\n  ...props\n}: ButtonProps) => {\n  const classes = useStyles();\n  const openInNewTab = (url: string): void => {\n    const newWindow = window.open(url, '_blank', 'noopener,noreferrer');\n    if (newWindow) newWindow.opener = null;\n  };\n  return (\n    <Button\n      className={classes.contact}\n      variant={variant}\n      startIcon={startIcon}\n      disableElevation={disableElevation}\n      onClick={() => openInNewTab(href)}\n      {...props}\n    >\n      {children}\n    </Button>\n  );\n};\n\nexport const ButtonDrawerMenu = ({ children, color = 'secondary', fullWidth = true, ...props }: ButtonProps) => {\n  const classes = useStyles();\n  return (\n    <Button className={classes.drawerMenu} color={color} fullWidth={fullWidth} {...props}>\n      {children}\n    </Button>\n  );\n};\n\nexport const ButtonSwitchMode = ({ children, color = 'secondary', ...props }: ButtonProps) => {\n  const classes = useStyles();\n  return (\n    <Button className={classes.switchMode} color={color} {...props}>\n      {children}\n    </Button>\n  );\n};\n\nexport const ButtonSubmit = ({\n  children,\n  color = 'primary',\n  variant = 'contained',\n  fullWidth = true,\n  ...props\n}: ButtonProps) => {\n  const classes = useStyles();\n  return (\n    <Box mt={2} mb={2}>\n      <Button\n        id=\"test-button-submit\"\n        className={classes.submit}\n        color={color}\n        variant={variant}\n        fullWidth={fullWidth}\n        {...props}\n      >\n        {children}\n      </Button>\n    </Box>\n  );\n};\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\nimport { base58Decode, checkAddressChecksum } from '@polkadot/util-crypto';\nimport { ChainState } from '../types/sourceTargetTypes';\nimport { INCORRECT_FORMAT, GENERIC, GENERIC_SUBSTRATE_PREFIX } from '../constants';\nimport getDeriveAccount from './getDeriveAccount';\nimport { getBridgeId } from './getConfigs';\n\ninterface Props {\n  receiverAddress: string;\n  targetChainDetails: ChainState;\n  sourceChainDetails: ChainState;\n}\n\nconst getReceiverAddress = ({ targetChainDetails, sourceChainDetails, receiverAddress }: Props) => {\n  const { configs: sourceConfigs, chain: sourceChain } = sourceChainDetails;\n  const { chain: targetChain, configs: targetConfigs } = targetChainDetails;\n\n  const targetSS58Format = targetConfigs.ss58Format;\n  const bridgeId = getBridgeId(targetConfigs, sourceConfigs.chainName);\n\n  const getChainBySS58Prefix = (prefix: number) => {\n    switch (prefix) {\n      case GENERIC_SUBSTRATE_PREFIX:\n        return GENERIC;\n      case targetConfigs.ss58Format:\n        return targetChain;\n      case sourceConfigs.ss58Format:\n        return sourceChain;\n      default:\n        return '';\n    }\n  };\n\n  try {\n    const decodedReceiverAddress = base58Decode(receiverAddress);\n    const [isValidDerivedAcccount, , , ss58Decoded] = checkAddressChecksum(decodedReceiverAddress);\n\n    const formatFound = getChainBySS58Prefix(ss58Decoded) || ss58Decoded;\n    const doesTargetFormatMatch = ss58Decoded === targetSS58Format;\n\n    if (isValidDerivedAcccount && doesTargetFormatMatch) {\n      return { address: receiverAddress, formatFound };\n    }\n\n    const address = getDeriveAccount({\n      ss58Format: targetSS58Format,\n      address: receiverAddress,\n      bridgeId\n    });\n\n    return { address, formatFound };\n  } catch (e) {\n    if (receiverAddress) {\n      throw new Error(INCORRECT_FORMAT);\n    }\n    return { address: '', formatFound: null };\n  }\n};\n\nexport default getReceiverAddress;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport BN from 'bn.js';\nimport { EvalMessages } from '../types/transactionTypes';\n\nconst getSiValue = (si: number): BN => new BN(10).pow(new BN(si));\n\nconst si = [\n  { value: getSiValue(24), symbol: 'y', isMil: true },\n  { value: getSiValue(21), symbol: 'z', isMil: true },\n  { value: getSiValue(18), symbol: 'a', isMil: true },\n  { value: getSiValue(15), symbol: 'f', isMil: true },\n  { value: getSiValue(12), symbol: 'p', isMil: true },\n  { value: getSiValue(9), symbol: 'n', isMil: true },\n  { value: getSiValue(6), symbol: 'μ', isMil: true },\n  { value: getSiValue(3), symbol: 'm', isMil: true },\n  { value: new BN(1), symbol: '' },\n  { value: getSiValue(3), symbol: 'k' },\n  { value: getSiValue(6), symbol: 'M' },\n  { value: getSiValue(9), symbol: 'G' },\n  { value: getSiValue(12), symbol: 'T' },\n  { value: getSiValue(15), symbol: 'P' },\n  { value: getSiValue(18), symbol: 'E' },\n  { value: getSiValue(21), symbol: 'Y' },\n  { value: getSiValue(24), symbol: 'Z' }\n];\n\nconst allowedSymbols = si\n  .map((s) => s.symbol)\n  .join(', ')\n  .replace(', ,', ',');\nconst floats = new RegExp('^[+]?[0-9]*[.,]{1}[0-9]*$');\nconst ints = new RegExp('^[+]?[0-9]+$');\nconst alphaFloats = new RegExp('^[+]?[0-9]*[.,]{1}[0-9]*[' + allowedSymbols + ']{1}$');\nconst alphaInts = new RegExp('^[+]?[0-9]*[' + allowedSymbols + ']{1}$');\n\n/**\n * A function that identifes integer/float(comma or dot)/expressions (such as 1k)\n * and converts to actual value (or reports an error).\n * @param {string} input\n * @returns {[number | null, string]} an array of 2 items\n * the first is the actual calculated number (or null if none) while\n * the second is the message that should appear in case of error\n */\nexport function evalUnits(input: string, chainDecimals: number): [BN | null, string] {\n  //sanitize input to remove + char if exists\n  input = input && input.replace('+', '');\n  if (!floats.test(input) && !ints.test(input) && !alphaInts.test(input) && !alphaFloats.test(input)) {\n    return [null, EvalMessages.GIBBERISH];\n  }\n  // find the character from the alphanumerics\n  const symbol = input.replace(/[0-9.,]/g, '');\n  // find the value from the si list\n  const siVal = si.find((s) => s.symbol === symbol);\n  const numberStr = input.replace(symbol, '').replace(',', '.');\n  let numeric: BN = new BN(0);\n\n  if (!siVal) {\n    return [null, EvalMessages.SYMBOL_ERROR];\n  }\n  const decimalsBn = new BN(10).pow(new BN(chainDecimals));\n  const containDecimal = numberStr.includes('.');\n  const [decPart, fracPart] = numberStr.split('.');\n  const fracDecimals = fracPart?.length || 0;\n  const fracExp = new BN(10).pow(new BN(fracDecimals));\n  numeric = containDecimal ? new BN(new BN(decPart).mul(fracExp).add(new BN(fracPart))) : new BN(new BN(numberStr));\n  numeric = numeric.mul(decimalsBn);\n  if (containDecimal) {\n    numeric = siVal.isMil ? numeric.div(siVal.value).div(fracExp) : numeric.mul(siVal.value).div(fracExp);\n  } else {\n    numeric = siVal.isMil ? numeric.div(siVal.value) : numeric.mul(siVal.value);\n  }\n  if (numeric.eq(new BN(0))) {\n    return [null, EvalMessages.ZERO];\n  }\n  return [numeric, EvalMessages.SUCCESS];\n}\n\nexport function transformToBaseUnit(estFee: string, chainDecimals: number): string {\n  const t = estFee.length - chainDecimals;\n  let s = '';\n  // if chainDecimals are more than the estFee length\n  if (t < 0) {\n    // add 0 in front (1 less as we want the 0.)\n    for (let i = 0; i < Math.abs(t) - 1; i++) {\n      s += '0';\n    }\n    s = s + estFee;\n    // remove trailing 0s\n    for (let i = 0; i < s.length; i++) {\n      if (s.slice(s.length - 1) !== '0') break;\n      s = s.substring(0, s.length - 1);\n    }\n    s = '0.' + s;\n  } else {\n    s = (parseInt(estFee) / 10 ** chainDecimals).toString();\n  }\n  return parseFloat(s) !== 0 ? s : '0';\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { INCORRECT_FORMAT, GENERIC } from '../constants';\nimport { TransactionActionTypes } from '../actions/transactionActions';\nimport { TransactionDisplayPayload } from '../types/transactionTypes';\n\nimport getReceiverAddress from '../util/getReceiverAddress';\nimport { Payload, TransactionsActionType, TransactionState, ReceiverPayload } from '../types/transactionTypes';\nimport { ChainState } from '../types/sourceTargetTypes';\nimport logger from '../util/logger';\nimport { evalUnits } from '../util/evalUnits';\n\nconst updateTransaction = (state: TransactionState, payload: Payload): TransactionState => {\n  if (state.transactions) {\n    const newState = { ...state };\n    const { updatedValues, id } = payload;\n    newState.transactions = newState.transactions.map((stateTransaction) => {\n      const { id: transactionId } = stateTransaction;\n      if (transactionId === id) {\n        return {\n          ...stateTransaction,\n          ...updatedValues\n        };\n      }\n      return stateTransaction;\n    });\n    return newState;\n  }\n  return state;\n};\n\nconst validateAccount = (receiver: string, sourceChainDetails: ChainState, targetChainDetails: ChainState) => {\n  try {\n    if (!receiver) {\n      return { formatFound: null, receiverAddress: null };\n    }\n    const { address, formatFound } = getReceiverAddress({\n      targetChainDetails,\n      sourceChainDetails,\n      receiverAddress: receiver\n    });\n\n    return { formatFound, receiverAddress: address };\n  } catch (e) {\n    logger.error(e.message);\n    if (e.message === INCORRECT_FORMAT) {\n      return { formatFound: e.message, receiverAddress: receiver };\n    }\n  }\n};\n\nconst isReadyToExecute = (state: TransactionState): boolean => {\n  const { transactionRunning, receiverAddress, transferAmount, senderAccount } = state;\n  return Boolean(!transactionRunning && receiverAddress && transferAmount && senderAccount);\n};\n\nconst setReceiver = (state: TransactionState, payload: ReceiverPayload): TransactionState => {\n  const { unformattedReceiverAddress, sourceChainDetails, targetChainDetails } = payload;\n  const transactionReadyToExecute = isReadyToExecute(state);\n  if (!unformattedReceiverAddress) {\n    return {\n      ...state,\n      addressValidationError: null,\n      showBalance: false,\n      unformattedReceiverAddress,\n      receiverAddress: null,\n      genericReceiverAccount: null,\n      formatFound: null,\n      transactionReadyToExecute\n    };\n  }\n\n  const { receiverAddress, formatFound } = validateAccount(\n    unformattedReceiverAddress,\n    sourceChainDetails,\n    targetChainDetails\n  )!;\n\n  const { chain: targetChain } = targetChainDetails;\n  const { chain: sourceChain } = sourceChainDetails;\n\n  if (formatFound === INCORRECT_FORMAT) {\n    return {\n      ...state,\n      addressValidationError: 'Invalid address',\n      showBalance: false,\n      unformattedReceiverAddress,\n      receiverAddress: null,\n      genericReceiverAccount: null,\n      formatFound,\n      transactionReadyToExecute: false\n    };\n  }\n\n  if (formatFound === GENERIC) {\n    return {\n      ...state,\n      unformattedReceiverAddress,\n      receiverAddress: null,\n      genericReceiverAccount: unformattedReceiverAddress,\n      addressValidationError: null,\n      showBalance: false,\n      formatFound,\n      transactionReadyToExecute: false\n    };\n  }\n\n  if (formatFound === targetChain) {\n    return {\n      ...state,\n      unformattedReceiverAddress,\n      receiverAddress,\n      genericReceiverAccount: null,\n      addressValidationError: null,\n      showBalance: true,\n      formatFound,\n      transactionReadyToExecute,\n      estimatedFeeLoading: Boolean(state.transferAmount)\n    };\n  }\n\n  if (formatFound === sourceChain) {\n    return {\n      ...state,\n      unformattedReceiverAddress,\n      receiverAddress: unformattedReceiverAddress,\n      derivedReceiverAccount: receiverAddress,\n      genericReceiverAccount: null,\n      addressValidationError: null,\n      showBalance: true,\n      formatFound,\n      transactionReadyToExecute,\n      estimatedFeeLoading: Boolean(state.transferAmount)\n    };\n  }\n\n  return {\n    ...state,\n    addressValidationError: `Unsupported address SS58 prefix: ${formatFound}`,\n    showBalance: false,\n    unformattedReceiverAddress,\n    receiverAddress: null,\n    genericReceiverAccount: null,\n    formatFound,\n    transactionReadyToExecute: false\n  };\n};\n\nexport default function transactionReducer(state: TransactionState, action: TransactionsActionType): TransactionState {\n  console.log(action);\n  switch (action.type) {\n    case TransactionActionTypes.SET_ESTIMATED_FEE: {\n      const { estimatedFeeError, estimatedFeeLoading } = action.payload;\n\n      let estimatedFee = null;\n\n      if (\n        !estimatedFeeError &&\n        !estimatedFeeLoading &&\n        action.payload.estimatedFee &&\n        !state.estimatedFeeError &&\n        !state.transferAmountError\n      ) {\n        estimatedFee = action.payload.estimatedFee;\n      }\n\n      return {\n        ...state,\n        estimatedFee,\n        estimatedFeeError: estimatedFeeError,\n        estimatedFeeLoading: estimatedFeeLoading,\n        transactionReadyToExecute: estimatedFeeLoading ? false : isReadyToExecute(state) && estimatedFee\n      };\n    }\n\n    case TransactionActionTypes.SET_TRANSFER_AMOUNT: {\n      const { transferAmount, chainDecimals } = action.payload;\n      const [actualValue, message] = evalUnits(transferAmount, chainDecimals);\n      return {\n        ...state,\n        transferAmount: actualValue || null,\n        transferAmountError: message,\n        transactionReadyToExecute: false,\n        estimatedFeeLoading: Boolean(actualValue) && Boolean(state.receiverAddress),\n        estimatedFee: null\n      };\n    }\n    case TransactionActionTypes.SET_PAYLOAD: {\n      const { payloadError, payload } = action.payload;\n      return {\n        ...state,\n        payload: payloadError ? null : payload,\n        payloadError,\n        estimatedFee: null\n      };\n    }\n    case TransactionActionTypes.RESET:\n      return {\n        ...state,\n        derivedReceiverAccount: null,\n        estimatedFee: null,\n        estimatedFeeError: null,\n        genericReceiverAccount: null,\n        receiverAddress: null,\n        transferAmount: null,\n        transferAmountError: null,\n        unformattedReceiverAddress: null,\n        addressValidationError: null,\n        payload: null,\n        payloadError: null,\n        transactionDisplayPayload: {} as TransactionDisplayPayload,\n        showBalance: false,\n        formatFound: null\n      };\n    case TransactionActionTypes.SET_RECEIVER_ADDRESS:\n      return {\n        ...state,\n        receiverAddress: action.payload.receiverAddress,\n        transactionReadyToExecute: isReadyToExecute(state)\n      };\n    case TransactionActionTypes.CREATE_TRANSACTION_STATUS:\n      return { ...state, transactions: [action.payload.initialTransaction, ...state.transactions] };\n    case TransactionActionTypes.UPDATE_CURRENT_TRANSACTION_STATUS:\n      return updateTransaction(state, action.payload);\n    case TransactionActionTypes.SET_RECEIVER:\n      return setReceiver(state, action.payload.receiverPayload);\n    case TransactionActionTypes.SET_TRANSACTION_RUNNING: {\n      return { ...state, transactionRunning: action.payload.transactionRunning };\n    }\n    case TransactionActionTypes.SET_SENDER_ACCOUNT:\n      return { ...state, senderAccount: action.payload.senderAccount };\n\n    default:\n      throw new Error(`Unknown type: ${action.type}`);\n  }\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useContext, useReducer, useEffect } from 'react';\nimport transactionReducer from '../reducers/transactionReducer';\nimport { TransactionState, TransactionsActionType, TransactionDisplayPayload } from '../types/transactionTypes';\nimport { TransactionActionCreators } from '../actions/transactionActions';\nimport { useAccountContext } from './AccountContextProvider';\n\ninterface TransactionContextProviderProps {\n  children: React.ReactElement;\n}\n\nexport interface UpdateTransactionContext {\n  dispatchTransaction: React.Dispatch<TransactionsActionType>;\n}\n\nexport const TransactionContext: React.Context<TransactionState> = React.createContext({} as TransactionState);\n\nexport const UpdateTransactionContext: React.Context<UpdateTransactionContext> = React.createContext(\n  {} as UpdateTransactionContext\n);\n\nexport function useTransactionContext() {\n  return useContext(TransactionContext);\n}\n\nexport function useUpdateTransactionContext() {\n  return useContext(UpdateTransactionContext);\n}\n\nexport function TransactionContextProvider(props: TransactionContextProviderProps): React.ReactElement {\n  const { children = null } = props;\n  const { account } = useAccountContext();\n\n  const [transaction, dispatchTransaction] = useReducer(transactionReducer, {\n    senderAccount: null,\n    transferAmount: null,\n    transferAmountError: null,\n    estimatedFee: null,\n    estimatedFeeError: null,\n    estimatedFeeLoading: false,\n    receiverAddress: null,\n    unformattedReceiverAddress: null,\n    derivedReceiverAccount: null,\n    genericReceiverAccount: null,\n    transactions: [],\n    transactionDisplayPayload: {} as TransactionDisplayPayload,\n    transactionRunning: false,\n    transactionReadyToExecute: false,\n    addressValidationError: null,\n    showBalance: false,\n    formatFound: null,\n    payload: null,\n    payloadError: null,\n    payloadHex: null\n  });\n\n  useEffect((): void => {\n    dispatchTransaction(TransactionActionCreators.setSenderAccount(account ? account.address : null));\n  }, [account, dispatchTransaction]);\n\n  return (\n    <TransactionContext.Provider value={transaction}>\n      <UpdateTransactionContext.Provider value={{ dispatchTransaction }}>{children}</UpdateTransactionContext.Provider>\n    </TransactionContext.Provider>\n  );\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nexport default (item: string) => {\n  if (!item || item.length < 8) {\n    return item;\n  }\n\n  return `${item.substring(0, 6)}...${item.substring(item.length - 8)}`;\n};\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { ApiPromise } from '@polkadot/api';\n\nexport enum ChainSubscriptions {\n  SOURCE = 'sourceSubscriptions',\n  TARGET = 'targetSubscriptions'\n}\n\ninterface OutboundLanes {\n  latestReceivedNonce: string;\n  pendingMessages: string;\n  totalMessages: string;\n}\nexport interface Subscriptions {\n  bestBlock: string;\n  bestBlockFinalized: string;\n  bestBridgedFinalizedBlock: string;\n  bridgeReceivedMessages: string;\n  outboundLanes: OutboundLanes;\n}\n\nexport interface SubscriptionsContextType {\n  [ChainSubscriptions.SOURCE]: Subscriptions;\n  [ChainSubscriptions.TARGET]: Subscriptions;\n}\n\nexport interface SubscriptionInput {\n  chain: string;\n  api: ApiPromise;\n  isApiReady: boolean;\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { SubscriptionInput } from '../../types/subscriptionsTypes';\nimport { useMountedState } from '../react/useMountedState';\nimport { useApiSubscription } from './useApiSubscription';\nimport { useCallback } from 'react';\n\nconst useBlocksInfo = ({ isApiReady, api, chain }: SubscriptionInput) => {\n  const [bestBlock, setBestBlock] = useMountedState('');\n  const [bestBlockFinalized, setBestBlockFinalized] = useMountedState('');\n  const isReady = !!(isApiReady && chain);\n\n  const getBestNumber = useCallback(\n    () =>\n      api.derive.chain.bestNumber((res) => {\n        setBestBlock(res.toString());\n      }),\n    [api.derive.chain, setBestBlock]\n  );\n\n  const getBestBlockFinalized = useCallback(\n    () =>\n      api.derive.chain.bestNumberFinalized((res) => {\n        setBestBlockFinalized(res.toString());\n      }),\n    [api.derive.chain, setBestBlockFinalized]\n  );\n\n  useApiSubscription(getBestNumber, isReady);\n  useApiSubscription(getBestBlockFinalized, isReady);\n\n  return { bestBlock, bestBlockFinalized };\n};\n\nexport default useBlocksInfo;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { useCallback } from 'react';\nimport { SubscriptionInput } from '../../types/subscriptionsTypes';\nimport { Hash } from '@polkadot/types/interfaces';\nimport { Codec } from '@polkadot/types/types';\nimport BN from 'bn.js';\nimport { useMountedState } from '../react/useMountedState';\nimport { getSubstrateDynamicNames } from '../../util/getSubstrateDynamicNames';\nimport { useApiSubscription } from './useApiSubscription';\ninterface HeaderId {\n  number: BN;\n  hash: Hash;\n}\n\ntype CodecHeaderId = Codec & HeaderId;\n\nconst useBridgedBlocks = ({ isApiReady, api, chain }: SubscriptionInput) => {\n  const [bestBridgedFinalizedBlock, setBestBridgedFinalizedBlock] = useMountedState('');\n  const [bestFinalizedBlock, setBestFinalizedBlock] = useMountedState('');\n  const { bridgedGrandpaChain } = getSubstrateDynamicNames(chain);\n  const isReady: boolean = !!(isApiReady && chain);\n\n  const getBestFinalizedBlock = useCallback(\n    () =>\n      api.query[bridgedGrandpaChain].bestFinalized((res: CodecHeaderId) => {\n        const bestFinalized = res.toString();\n        setBestFinalizedBlock(bestFinalized);\n      }),\n    [api.query, bridgedGrandpaChain, setBestFinalizedBlock]\n  );\n\n  const getBestBridgedFinalizedBlock = useCallback(\n    () =>\n      api.query[bridgedGrandpaChain].importedHeaders(bestFinalizedBlock, (res: any) => {\n        const importedHeader = res?.toJSON()?.number;\n        importedHeader && setBestBridgedFinalizedBlock(importedHeader);\n      }),\n    [api.query, bestFinalizedBlock, bridgedGrandpaChain, setBestBridgedFinalizedBlock]\n  );\n\n  useApiSubscription(getBestFinalizedBlock, isReady);\n  useApiSubscription(getBestBridgedFinalizedBlock, isReady && Boolean(bestFinalizedBlock));\n\n  return { bestBridgedFinalizedBlock, setBestFinalizedBlock };\n};\n\nexport default useBridgedBlocks;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { ApiPromise } from '@polkadot/api';\nimport { useSourceTarget } from '../../contexts/SourceTargetContextProvider';\nimport { ChainDetails } from '../../types/sourceTargetTypes';\n\nconst emptyProfile = {\n  apiConnection: {\n    api: {} as ApiPromise,\n    isApiReady: false\n  },\n  target: '',\n  source: '',\n  polkadotjsUrl: ''\n};\n\nexport default function useChainProfile(chainDetail: ChainDetails) {\n  const { sourceChainDetails, targetChainDetails } = useSourceTarget();\n\n  if (!sourceChainDetails || !targetChainDetails) {\n    return emptyProfile;\n  }\n\n  const { chain: sourceChain, ...restSource } = sourceChainDetails;\n  const { chain: targetChain, ...restTarget } = targetChainDetails;\n\n  if (chainDetail === ChainDetails.TARGET) {\n    return { source: targetChain, target: sourceChain, ...restTarget };\n  }\n  return { source: sourceChain, target: targetChain, ...restSource };\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport BN from 'bn.js';\nimport { useCallback } from 'react';\nimport { SubscriptionInput } from '../../types/subscriptionsTypes';\nimport { useMountedState } from '../react/useMountedState';\nimport { useApiSubscription } from './useApiSubscription';\nimport useLaneId from '../chain/useLaneId';\nimport { getSubstrateDynamicNames } from '../../util/getSubstrateDynamicNames';\n\ninterface Output {\n  bridgeReceivedMessages: string;\n  outboundLanes: {\n    pendingMessages: string;\n    totalMessages: string;\n    latestReceivedNonce: string;\n  };\n}\n\nconst useMessagesLane = ({ isApiReady, api, chain }: SubscriptionInput): Output => {\n  const [outboundLanes, setOutboudLanes] = useMountedState({\n    latestReceivedNonce: '0',\n    pendingMessages: '0',\n    totalMessages: '0'\n  });\n\n  const [bridgeReceivedMessages, setBridgesReceivedMessages] = useMountedState('0');\n  const laneId = useLaneId();\n\n  const { bridgedMessages } = getSubstrateDynamicNames(chain);\n\n  const isReady = !!(isApiReady && api.query[bridgedMessages] && chain);\n\n  const getOutboundLaneData = useCallback(\n    () =>\n      api.query[bridgedMessages].outboundLanes(laneId, (res: any) => {\n        const latest_generated_nonce = res.get('latest_generated_nonce').toString();\n        const latest_received_nonce = res.get('latest_received_nonce').toString();\n        const pendingMessages = new BN(latest_generated_nonce).sub(new BN(latest_received_nonce));\n\n        setOutboudLanes({\n          latestReceivedNonce: latest_received_nonce.toString(),\n          pendingMessages: pendingMessages.isNeg() ? '0' : pendingMessages.toString(),\n          totalMessages: latest_generated_nonce\n        });\n      }),\n    [api.query, bridgedMessages, laneId, setOutboudLanes]\n  );\n\n  const getInboundLaneData = useCallback(\n    () =>\n      api.query[bridgedMessages].inboundLanes(laneId, (res: any) => {\n        setBridgesReceivedMessages(res.get('last_confirmed_nonce').toString());\n      }),\n    [api.query, bridgedMessages, laneId, setBridgesReceivedMessages]\n  );\n\n  useApiSubscription(getOutboundLaneData, isReady);\n\n  useApiSubscription(getInboundLaneData, isReady);\n\n  return { bridgeReceivedMessages, outboundLanes };\n};\n\nexport default useMessagesLane;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nexport default function useLaneId(): string {\n  const laneId = process.env.REACT_APP_LANE_ID || '0x00000000';\n  // To complete with configuration logic once we will have different lane ids\n  return laneId;\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { ChainDetails } from '../../types/sourceTargetTypes';\nimport { Subscriptions } from '../../types/subscriptionsTypes';\nimport useBlocksInfo from './useBlocksInfo';\nimport useBridgedBlocks from './useBridgedBlocks';\nimport useChainProfile from '../chain/useChainProfile';\nimport useMessagesLane from './useMessagesLane';\n\ninterface Source {\n  source: string;\n  polkadotjsUrl: string;\n}\n\ntype Output = Subscriptions & Source;\n\nconst useSubscriptions = (ChainDetail: ChainDetails): Output => {\n  const {\n    apiConnection: { api, isApiReady },\n    target,\n    source,\n    polkadotjsUrl\n  } = useChainProfile(ChainDetail);\n\n  const blockInfo = useBlocksInfo({ api, chain: source, isApiReady });\n  const { bestBridgedFinalizedBlock } = useBridgedBlocks({ api, chain: target, isApiReady });\n  const messagesLane = useMessagesLane({ api, chain: target, isApiReady });\n\n  return { ...blockInfo, bestBridgedFinalizedBlock, ...messagesLane, source, polkadotjsUrl };\n};\n\nexport default useSubscriptions;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useContext } from 'react';\nimport { ChainDetails } from '../types/sourceTargetTypes';\nimport { ChainSubscriptions, SubscriptionsContextType } from '../types/subscriptionsTypes';\nimport useSubscriptions from '../hooks/subscriptions/useSubscriptions';\n\ninterface SubscriptionsContextProviderProps {\n  children: React.ReactElement;\n}\n\nexport const SubscriptionsContext: React.Context<SubscriptionsContextType> = React.createContext(\n  {} as SubscriptionsContextType\n);\n\nexport function useSubscriptionsContext() {\n  return useContext(SubscriptionsContext);\n}\n\nexport function SubscriptionsContextProvider(props: SubscriptionsContextProviderProps): React.ReactElement {\n  const onSourceChainSubscriptions = useSubscriptions(ChainDetails.SOURCE);\n  const onTargetChainSubscriptions = useSubscriptions(ChainDetails.TARGET);\n  const { children = null } = props;\n  const subscriptions: SubscriptionsContextType = {\n    [ChainSubscriptions.SOURCE]: onSourceChainSubscriptions,\n    [ChainSubscriptions.TARGET]: onTargetChainSubscriptions\n  };\n\n  return <SubscriptionsContext.Provider value={subscriptions}>{children}</SubscriptionsContext.Provider>;\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {\n  TransactionStatusType,\n  TransactionStatusEnum,\n  Payload,\n  TransactionDisplayPayload\n} from '../types/transactionTypes';\nimport { encodeAddress } from '@polkadot/util-crypto';\nimport { SourceTargetState } from '../types/sourceTargetTypes';\nimport type { InterfaceTypes } from '@polkadot/types/types';\n\nexport function isTransactionCompleted(transaction: TransactionStatusType): boolean {\n  return transaction.status === TransactionStatusEnum.COMPLETED;\n}\n\ninterface PayloadInput {\n  payload: Payload;\n  account: string;\n  createType: Function;\n  sourceTargetDetails: SourceTargetState;\n}\n\ninterface Output {\n  transactionDisplayPayload: TransactionDisplayPayload | null;\n  payloadHex: string | null;\n}\n\nexport function getTransactionDisplayPayload({\n  payload,\n  account,\n  createType,\n  sourceTargetDetails\n}: PayloadInput): Output {\n  const {\n    sourceChainDetails: {\n      chain: sourceChain,\n      configs: { ss58Format }\n    },\n    targetChainDetails: { chain: targetChain }\n  } = sourceTargetDetails;\n  const payloadType = createType(sourceChain as keyof InterfaceTypes, 'OutboundPayload', payload);\n  const payloadHex = payloadType.toHex();\n  const callType = createType(targetChain as keyof InterfaceTypes, 'BridgedOpaqueCall', payload.call);\n  const call = createType(targetChain as keyof InterfaceTypes, 'Call', callType.toHex());\n  const formatedAccount = encodeAddress(account, ss58Format);\n\n  const transactionDisplayPayload = {} as TransactionDisplayPayload;\n  const { spec_version, weight } = payload;\n  transactionDisplayPayload.call = JSON.parse(call);\n  transactionDisplayPayload.origin = {\n    SourceAccount: formatedAccount\n  };\n  transactionDisplayPayload.weight = weight;\n  transactionDisplayPayload.spec_version = spec_version;\n  return { transactionDisplayPayload, payloadHex };\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { ChainSubscriptions } from '../types/subscriptionsTypes';\nimport { SourceTargetState } from '../types/sourceTargetTypes';\n\ninterface Input {\n  useSourceTarget: () => SourceTargetState;\n  sourceChain: string;\n}\n\nexport function getChainSubscriptionsKey({ useSourceTarget, sourceChain }: Input) {\n  const {\n    sourceChainDetails: { chain: currentSourceChain }\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n  } = useSourceTarget();\n\n  const sourceChainsMatch = sourceChain === currentSourceChain;\n\n  const sourceRole = sourceChainsMatch ? ChainSubscriptions.SOURCE : ChainSubscriptions.TARGET;\n  const targetRole = sourceChainsMatch ? ChainSubscriptions.TARGET : ChainSubscriptions.SOURCE;\n\n  return { sourceRole, targetRole, sourceChainsMatch };\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { useEffect } from 'react';\nimport { useSourceTarget } from '../../contexts/SourceTargetContextProvider';\nimport { useSubscriptionsContext } from '../../contexts/SubscriptionsContextProvider';\n\nimport useLaneId from '../chain/useLaneId';\nimport useLoadingApi from '../connections/useLoadingApi';\nimport { useMountedState } from '../react/useMountedState';\nimport useChainGetters from '../chain/useChainGetters';\nimport { isTransactionCompleted } from '../../util/transactionUtils';\nimport { getChainSubscriptionsKey } from '../../util/chainsUtils';\nimport { TransactionStatusType } from '../../types/transactionTypes';\nimport { getSubstrateDynamicNames } from '../../util/getSubstrateDynamicNames';\nimport { useApiCallsContext } from '../../contexts/ApiCallsContextProvider';\nimport type { InterfaceTypes } from '@polkadot/types/types';\n\ninterface Props {\n  transaction: TransactionStatusType;\n}\n\nconst useTransactionNonces = ({ transaction }: Props) => {\n  const [nonceOfBestTargetBlock, setNonceOfBestTargetBlock] = useMountedState<null | number>(null);\n  const [nonceOfFinalTargetBlock, setNonceOfFinalTargetBlock] = useMountedState<null | number>(null);\n  const subscriptions = useSubscriptionsContext();\n  const { getValuesByChain } = useChainGetters();\n  const laneId = useLaneId();\n  const { areApiReady } = useLoadingApi();\n  const { sourceChain, targetChain } = transaction;\n  const { api: targetApi } = getValuesByChain(targetChain);\n  const { targetRole } = getChainSubscriptionsKey({\n    useSourceTarget,\n    sourceChain\n  });\n  const { createType, stateCall } = useApiCallsContext();\n\n  const { bestBlockFinalized, bestBlock } = subscriptions[targetRole];\n\n  const { latestReceivedNonceMethodName } = getSubstrateDynamicNames(sourceChain);\n\n  useEffect(() => {\n    if (!areApiReady || !transaction || !transaction || isTransactionCompleted(transaction)) {\n      return;\n    }\n\n    const getLatestReceivedNonce = async (blockNumber: string) => {\n      const blockHash = await targetApi.rpc.chain.getBlockHash(blockNumber);\n      const latestReceivedNonceCall = await stateCall(\n        targetChain,\n        latestReceivedNonceMethodName,\n        laneId,\n        blockHash.toJSON()\n      );\n\n      const latestReceivedNonceCallType = createType(\n        targetChain as keyof InterfaceTypes,\n        'MessageNonce',\n        latestReceivedNonceCall\n      );\n      const latestReceivedNonce = latestReceivedNonceCallType.toString();\n      return parseInt(latestReceivedNonce);\n    };\n\n    const updateNonces = async () => {\n      const finalizedNonce = getLatestReceivedNonce(bestBlockFinalized);\n      const bestNonce = getLatestReceivedNonce(bestBlock);\n\n      setNonceOfBestTargetBlock(await bestNonce);\n      setNonceOfFinalTargetBlock(await finalizedNonce);\n    };\n\n    updateNonces();\n  }, [\n    areApiReady,\n    transaction,\n    laneId,\n    latestReceivedNonceMethodName,\n    setNonceOfBestTargetBlock,\n    setNonceOfFinalTargetBlock,\n    bestBlock,\n    bestBlockFinalized,\n    stateCall,\n    targetChain,\n    createType,\n    targetApi.rpc.chain\n  ]);\n\n  return { nonceOfBestTargetBlock, nonceOfFinalTargetBlock };\n};\n\nexport default useTransactionNonces;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport BN from 'bn.js';\nimport { useEffect, useState } from 'react';\nimport useTransactionNonces from './useTransactionNonces';\nimport { useSourceTarget } from '../../contexts/SourceTargetContextProvider';\nimport { useSubscriptionsContext } from '../../contexts/SubscriptionsContextProvider';\n\nimport useLoadingApi from '../connections/useLoadingApi';\nimport { getChainSubscriptionsKey } from '../../util/chainsUtils';\nimport { Step, TransactionStatusEnum, TransactionStatusType } from '../../types/transactionTypes';\n\ninterface Props {\n  transaction: TransactionStatusType;\n  onComplete: () => void;\n}\n\nconst useTransactionSteps = ({ transaction, onComplete }: Props) => {\n  const [steps, setSteps] = useState<Array<Step>>([]);\n  const [deliveryBlock, setDeliveryBlock] = useState<string | null>();\n  const [finished, setFinished] = useState(false);\n  const subscriptions = useSubscriptionsContext();\n  const { nonceOfBestTargetBlock, nonceOfFinalTargetBlock } = useTransactionNonces({\n    transaction\n  });\n\n  const { areApiReady } = useLoadingApi();\n\n  const { sourceChain, targetChain } = transaction;\n  const { sourceRole, targetRole } = getChainSubscriptionsKey({\n    useSourceTarget,\n    sourceChain\n  });\n\n  const {\n    bestBlockFinalized,\n    outboundLanes: { latestReceivedNonce: latestReceivedNonceOnSource }\n  } = subscriptions[sourceRole];\n  const {\n    bestBridgedFinalizedBlock: bestBridgedFinalizedBlockOnTarget,\n    bestBlockFinalized: bestBlockFinalizedOnTarget,\n    bestBlock: bestBlockOnTarget\n  } = subscriptions[targetRole];\n\n  useEffect(() => {\n    if (!areApiReady || !transaction || finished) {\n      return;\n    }\n\n    const stepEvaluator = (transactionValue: string | number | null, chainValue: string | number | null): boolean => {\n      if (!transactionValue || !chainValue) return false;\n\n      const bnChainValue = new BN(chainValue);\n      const bnTransactionValue = new BN(transactionValue);\n\n      return bnChainValue.gte(bnTransactionValue);\n    };\n\n    const completionStatus = (isCompleted: boolean): TransactionStatusEnum => {\n      if (transaction.id === 0) {\n        return TransactionStatusEnum.NOT_STARTED;\n      }\n      return isCompleted ? TransactionStatusEnum.COMPLETED : TransactionStatusEnum.IN_PROGRESS;\n    };\n\n    // 1. We wait until the block transaction gets finalized  ( source.bestBlockFinalized is greater or equal to transaction.block )\n    const sourceTransactionFinalized = stepEvaluator(transaction.block, bestBlockFinalized);\n    // 2. When the target chain knows about a bigger source block number we infer that transaction block was realayed to target chain.\n    const blockFinalityRelayed = stepEvaluator(transaction.block, bestBridgedFinalizedBlockOnTarget);\n    // 3.1 We read the latest received nonce of the target chain rpc state call.\n    // 3.2 With the value obtained we compare it with the transaction nonce, if the value is bigger or equal then means target chain is aware about this nonce.\n    const messageDelivered = stepEvaluator(transaction.messageNonce, nonceOfBestTargetBlock);\n    // 4.1 *\n    // 4.2 We match the transaction nonce with the current nonce of the best finalized target block\n    const messageFinalizedOnTarget = stepEvaluator(transaction.messageNonce, nonceOfFinalTargetBlock);\n\n    // 5. Once the source chain is confirms through the latestReceivedNonceOnSource, that target chain is aware about the message nonce, the transaction is completed.\n    const sourceConfirmationReceived = stepEvaluator(transaction.messageNonce, latestReceivedNonceOnSource);\n    const onChainCompleted = (value: boolean) => completionStatus(value) === TransactionStatusEnum.COMPLETED;\n\n    // 4.1 * We catch the best block on target related to the message delivery.\n    if (messageDelivered && !deliveryBlock) {\n      setDeliveryBlock(bestBlockOnTarget);\n    }\n\n    setSteps([\n      {\n        id: 'test-step-include-message-block',\n        chainType: sourceChain,\n        label: 'Include message in block',\n        labelOnChain: transaction.block,\n        status: completionStatus(!!transaction.block)\n      },\n      {\n        id: 'test-step-finalized-block',\n        chainType: sourceChain,\n        label: 'Finalize block',\n        status: completionStatus(sourceTransactionFinalized)\n      },\n      {\n        id: 'test-step-relay-block',\n        chainType: targetChain,\n        label: 'Relay block',\n        status: completionStatus(blockFinalityRelayed)\n      },\n      {\n        id: 'test-step-deliver-message-block',\n        chainType: targetChain,\n        label: 'Deliver message in target block',\n        labelOnChain: onChainCompleted(messageDelivered) && deliveryBlock,\n        status: completionStatus(messageDelivered)\n      },\n      {\n        id: 'test-step-finalized-message',\n        chainType: targetChain,\n        label: 'Finalize message',\n        status: completionStatus(messageFinalizedOnTarget)\n      },\n      {\n        id: 'test-step-confirm-delivery',\n        chainType: sourceChain,\n        label: 'Confirm delivery',\n        status: completionStatus(sourceConfirmationReceived)\n      }\n    ]);\n\n    if (sourceConfirmationReceived) {\n      onComplete();\n      setFinished(true);\n    }\n  }, [\n    areApiReady,\n    bestBlockFinalized,\n    bestBlockFinalizedOnTarget,\n    bestBlockOnTarget,\n    bestBridgedFinalizedBlockOnTarget,\n    deliveryBlock,\n    finished,\n    latestReceivedNonceOnSource,\n    nonceOfBestTargetBlock,\n    nonceOfFinalTargetBlock,\n    onComplete,\n    setDeliveryBlock,\n    sourceChain,\n    targetChain,\n    transaction\n  ]);\n\n  return steps;\n};\n\nexport default useTransactionSteps;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\nimport FiberManualRecordTwoToneIcon from '@material-ui/icons/FiberManualRecordTwoTone';\nimport React from 'react';\n\nimport { TransactionStatusEnum } from '../types/transactionTypes';\n\nconst useStyles = makeStyles((theme) => ({\n  error: {\n    color: theme.palette.error.main\n  },\n  success: {\n    color: theme.palette.success.main\n  }\n}));\n\ninterface IconTxStatusProps {\n  status: keyof typeof TransactionStatusEnum;\n}\n\ninterface IconApiStatusProps {\n  status: boolean;\n  className?: string;\n}\nexport const IconTxStatus = ({ status }: IconTxStatusProps) => {\n  switch (status) {\n    case TransactionStatusEnum.COMPLETED:\n      return <CheckCircleOutlineIcon id=\"test-transaction-status-completed\" />;\n    case TransactionStatusEnum.IN_PROGRESS:\n      return <AutorenewIcon id=\"test-auto-new-icon\" />;\n    case TransactionStatusEnum.FAILED:\n      return <ErrorOutlineIcon id=\"test-error-outline-icon\" />;\n    case TransactionStatusEnum.NOT_STARTED:\n      return <FiberManualRecordTwoToneIcon id=\"test-fiber-manual-two-icon\" />;\n    default:\n      return <FiberManualRecordIcon id=\"test-fiber-manual-icon\" />;\n  }\n};\n\nexport const IconApiStatus = ({ status, className }: IconApiStatusProps) => {\n  const classes = useStyles();\n  return <FiberManualRecordIcon className={`${status ? classes.success : classes.error} ${className}`} />;\n};\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from 'react';\n\nimport { Box } from '@material-ui/core';\nimport { IconTxStatus } from './Icons';\nimport { useSourceTarget } from '../contexts/SourceTargetContextProvider';\nimport { TransactionStatusEnum } from '../types/transactionTypes';\n\ninterface Props {\n  status: TransactionStatusEnum;\n  type?: string;\n}\n\nconst TransactionHeader = ({ type, status }: Props) => {\n  const {\n    sourceChainDetails: { chain: sourceChain },\n    targetChainDetails: { chain: targetChain }\n  } = useSourceTarget();\n\n  return (\n    <Box className=\"header\" component=\"p\" id=\"test-transaction-header\">\n      <IconTxStatus status={status} /> {type} {sourceChain} {'->'} {targetChain}\n    </Box>\n  );\n};\n\nexport default TransactionHeader;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from 'react';\n\nimport { Box, Card, makeStyles, Typography } from '@material-ui/core';\nimport { IconTxStatus } from './Icons';\nimport { Step, TransactionStatusEnum } from '../types/transactionTypes';\nimport TransactionHeader from './TransactionHeader';\n\ninterface Props {\n  steps: Step[];\n  status: TransactionStatusEnum;\n  type?: string;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    '& p': {\n      ...theme.typography.body2\n    },\n    '& svg': {\n      marginBottom: '-0.2em',\n      fontSize: '1.2em',\n      marginRight: theme.spacing()\n    },\n    '& .header': {\n      fontWeight: 500\n    },\n    '&.MuiPaper-root': {\n      maxWidth: '100%',\n      padding: theme.spacing(2),\n      borderRadius: theme.spacing(1.5)\n    }\n  }\n}));\n\nconst TransactionReceipt = ({ type, steps, status }: Props) => {\n  const classes = useStyles();\n\n  return (\n    <Card elevation={24} className={classes.card}>\n      <TransactionHeader type={type} status={status} />\n      {steps.map(({ chainType, label, labelOnChain, status, id }) => (\n        <p key={id} id={id}>\n          <IconTxStatus status={status} /> {chainType}: {label}&nbsp;\n          {labelOnChain && (\n            <Box pt={0.25} pb={0.25} pl={0.5} pr={0.5} component=\"span\" border={1} borderRadius={6}>\n              <Typography component=\"span\" variant=\"subtitle2\">\n                {labelOnChain}\n              </Typography>\n            </Box>\n          )}\n        </p>\n      ))}\n    </Card>\n  );\n};\n\nexport default TransactionReceipt;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from 'react';\nimport { Card, makeStyles, CircularProgress, Typography } from '@material-ui/core';\nimport ReactJson from 'react-json-view';\nimport { SwitchTabEnum } from '../types/transactionTypes';\nimport TransactionHeader from './TransactionHeader';\nimport { useTransactionContext } from '../contexts/TransactionContext';\nimport { TransactionDisplayPayload } from '../types/transactionTypes';\nimport { TransactionStatusEnum } from '../types/transactionTypes';\n\nexport interface TransactionDisplayProps {\n  size?: 'sm';\n}\n\ninterface Props {\n  transactionDisplayProps?: TransactionDisplayProps;\n  tab: SwitchTabEnum;\n  payloadHex: string | null;\n  transactionDisplayPayload: TransactionDisplayPayload | null;\n  status: TransactionStatusEnum;\n  type?: string;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    '& p': {\n      ...theme.typography.body2\n    },\n    '& svg': {\n      marginBottom: '-0.2em',\n      fontSize: '1.2em',\n      marginRight: theme.spacing()\n    },\n    '& .header': {\n      fontWeight: 500\n    },\n    '&.MuiPaper-root': {\n      maxWidth: '100%',\n      padding: theme.spacing(2),\n      borderRadius: theme.spacing(1.5)\n    },\n    wordBreak: 'break-word'\n  },\n  loader: {\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'center'\n  }\n}));\n\nconst TransactionPayload = ({\n  tab,\n  transactionDisplayProps,\n  payloadHex,\n  transactionDisplayPayload,\n  type,\n  status\n}: Props) => {\n  const classes = useStyles();\n  const { estimatedFeeLoading } = useTransactionContext();\n  if (tab === SwitchTabEnum.RECEIPT) {\n    return null;\n  }\n\n  return (\n    <Card elevation={transactionDisplayProps?.size === 'sm' ? 23 : 24} className={classes.card}>\n      {payloadHex && <TransactionHeader type={type} status={status} />}\n      {estimatedFeeLoading && (\n        <div className={classes.loader}>\n          <CircularProgress />\n        </div>\n      )}\n      {!estimatedFeeLoading && tab === SwitchTabEnum.PAYLOAD && (\n        <Typography variant=\"subtitle2\">{payloadHex}</Typography>\n      )}\n      {!estimatedFeeLoading && tab === SwitchTabEnum.DECODED && transactionDisplayPayload && (\n        <Typography variant=\"subtitle2\">\n          <ReactJson src={transactionDisplayPayload} enableClipboard name={false} />\n        </Typography>\n      )}\n    </Card>\n  );\n};\n\nexport default TransactionPayload;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from 'react';\nimport { Box } from '@material-ui/core';\nimport { ButtonSwitchMode } from './Buttons';\nimport TransactionPayload from './TransactionPayload';\nimport { TransactionDisplayPayload } from '../types/transactionTypes';\nimport { SwitchTabEnum } from '../types/transactionTypes';\nimport { useCallback } from 'react';\nimport { TransactionStatusEnum } from '../types/transactionTypes';\n\nexport interface TransactionDisplayProps {\n  size?: 'sm';\n}\ninterface Props {\n  transactionDisplayProps?: TransactionDisplayProps;\n  children: JSX.Element | JSX.Element[];\n  payloadHex: string | null;\n  transactionDisplayPayload: TransactionDisplayPayload | null;\n  status: TransactionStatusEnum;\n  type?: string;\n}\n\nconst TransactionSwitchTab = ({\n  transactionDisplayProps,\n  children,\n  payloadHex,\n  transactionDisplayPayload,\n  type,\n  status\n}: Props) => {\n  const [tab, setTab] = useState(SwitchTabEnum.RECEIPT);\n\n  const getColorByState = (value: string) => (value === tab ? 'primary' : 'secondary');\n\n  const setTabCallback = useCallback((value: SwitchTabEnum) => () => setTab(value), []);\n\n  return (\n    <>\n      <Box mt={2}>\n        <ButtonSwitchMode\n          color={getColorByState(SwitchTabEnum.PAYLOAD)}\n          onClick={setTabCallback(SwitchTabEnum.PAYLOAD)}\n        >\n          Payload\n        </ButtonSwitchMode>\n        <ButtonSwitchMode\n          color={getColorByState(SwitchTabEnum.RECEIPT)}\n          onClick={setTabCallback(SwitchTabEnum.RECEIPT)}\n        >\n          Receipt\n        </ButtonSwitchMode>\n        <ButtonSwitchMode\n          color={getColorByState(SwitchTabEnum.DECODED)}\n          onClick={setTabCallback(SwitchTabEnum.DECODED)}\n        >\n          Decoded\n        </ButtonSwitchMode>\n      </Box>\n      {tab === SwitchTabEnum.RECEIPT && children}\n      <TransactionPayload\n        tab={tab}\n        type={type}\n        status={status}\n        transactionDisplayProps={transactionDisplayProps}\n        payloadHex={payloadHex}\n        transactionDisplayPayload={transactionDisplayPayload}\n      />\n    </>\n  );\n};\n\nexport default TransactionSwitchTab;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from 'react';\n\nimport useTransactionSteps from '../hooks/transactions/useTransactionSteps';\nimport { TransactionStatusType } from '../types/transactionTypes';\nimport TransactionReceipt from './TransactionReceipt';\nimport TransactionSwitchTab from './TransactionSwitchTab';\n\nexport interface TransactionDisplayProps {\n  size?: 'sm';\n}\ninterface Props {\n  transaction: TransactionStatusType;\n  onComplete: () => void;\n  transactionDisplayProps?: TransactionDisplayProps;\n}\n\nconst TransactionStatus = ({ transaction, onComplete }: Props) => {\n  const steps = useTransactionSteps({ transaction, onComplete });\n  const { payloadHex, transactionDisplayPayload } = transaction;\n\n  return (\n    <TransactionSwitchTab\n      payloadHex={payloadHex}\n      transactionDisplayPayload={transactionDisplayPayload}\n      status={transaction.status}\n      type={transaction.type}\n    >\n      <TransactionReceipt steps={steps} type={transaction.type} status={transaction.status} />\n    </TransactionSwitchTab>\n  );\n};\n\nexport default TransactionStatus;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { useEffect, useState } from 'react';\nimport { useSourceTarget } from '../../contexts/SourceTargetContextProvider';\nimport { useTransactionContext } from '../../contexts/TransactionContext';\n\nimport { TransactionDisplayPayload } from '../../types/transactionTypes';\nimport { getTransactionDisplayPayload } from '../../util/transactionUtils';\nimport useApiCalls from '../api/useApiCalls';\nimport { useAccountContext } from '../../contexts/AccountContextProvider';\n\ninterface Output {\n  transactionDisplayPayload: TransactionDisplayPayload | null;\n  payloadHex: string | null;\n}\n\nconst emptyState = { payloadHex: null, transactionDisplayPayload: null };\n\nconst useTransactionPayloadDisplay = () => {\n  const { payload } = useTransactionContext();\n\n  const [payloadDisplay, setPayloadDisplay] = useState<Output>(emptyState);\n  const sourceTargetDetails = useSourceTarget();\n  const { createType } = useApiCalls();\n  const { account } = useAccountContext();\n\n  useEffect(() => {\n    if (payload && account) {\n      setPayloadDisplay(\n        getTransactionDisplayPayload({\n          payload,\n          account: account.address,\n          createType,\n          sourceTargetDetails\n        })\n      );\n    } else {\n      setPayloadDisplay(emptyState);\n    }\n  }, [account, createType, payload, sourceTargetDetails]);\n\n  return payloadDisplay;\n};\n\nexport default useTransactionPayloadDisplay;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from 'react';\n\nimport { useSourceTarget } from '../contexts/SourceTargetContextProvider';\nimport { Step, TransactionStatusEnum } from '../types/transactionTypes';\nimport TransactionReceipt from './TransactionReceipt';\nimport TransactionSwitchTab from './TransactionSwitchTab';\nimport useTransactionPayloadDisplay from '../hooks/transactions/useTransactionPayloadDisplay';\ninterface Props {\n  type?: string;\n}\n\nconst TransactionStatusMock = ({ type }: Props) => {\n  const [steps, setSteps] = useState<Array<Step>>([]);\n\n  const {\n    sourceChainDetails: { chain: sourceChain },\n    targetChainDetails: { chain: targetChain }\n  } = useSourceTarget();\n  const { payloadHex, transactionDisplayPayload } = useTransactionPayloadDisplay();\n\n  useEffect(() => {\n    setSteps([\n      {\n        id: 'test-step-include-message-block',\n        chainType: sourceChain,\n        label: 'Include message in block',\n        labelOnChain: '',\n        status: TransactionStatusEnum.NOT_STARTED\n      },\n      {\n        id: 'test-step-finalized-block',\n        chainType: sourceChain,\n        label: 'Finalise block',\n        status: TransactionStatusEnum.NOT_STARTED\n      },\n      {\n        id: 'test-step-relay-block',\n        chainType: targetChain,\n        label: 'Relay block',\n        status: TransactionStatusEnum.NOT_STARTED\n      },\n      {\n        id: 'test-step-deliver-message-block',\n        chainType: targetChain,\n        label: 'Deliver message',\n        labelOnChain: '',\n        status: TransactionStatusEnum.NOT_STARTED\n      },\n      {\n        id: 'test-step-finalized-message',\n        chainType: targetChain,\n        label: 'Finalise message in target block',\n        labelOnChain: '',\n        status: TransactionStatusEnum.NOT_STARTED\n      },\n      {\n        id: 'test-step-confirm-delivery',\n        chainType: sourceChain,\n        label: 'Confirm delivery',\n        status: TransactionStatusEnum.NOT_STARTED\n      }\n    ]);\n  }, [sourceChain, targetChain]);\n\n  return (\n    <TransactionSwitchTab\n      payloadHex={payloadHex}\n      transactionDisplayPayload={transactionDisplayPayload}\n      type={type}\n      status={TransactionStatusEnum.NOT_STARTED}\n    >\n      <TransactionReceipt steps={steps} type={type} status={TransactionStatusEnum.NOT_STARTED} />\n    </TransactionSwitchTab>\n  );\n};\n\nexport default TransactionStatusMock;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from 'react';\n\nimport { MessageActionsCreators } from '../actions/messageActions';\nimport { TransactionActionCreators } from '../actions/transactionActions';\nimport { useUpdateMessageContext } from '../contexts/MessageContext';\nimport { useTransactionContext } from '../contexts/TransactionContext';\nimport { useUpdateTransactionContext } from '../contexts/TransactionContext';\nimport { TransactionStatusEnum, TransactionStatusType } from '../types/transactionTypes';\nimport shortenItem from '../util/shortenItem';\nimport TransactionStatus, { TransactionDisplayProps } from './TransactionStatus';\nimport TransactionStatusMock from './TransactionStatusMock';\n\ninterface Props extends TransactionDisplayProps {\n  type?: string;\n}\n\nconst Transactions = ({ type, ...transactionDisplayProps }: Props) => {\n  const { transactions } = useTransactionContext();\n  const { dispatchTransaction } = useUpdateTransactionContext();\n  const { dispatchMessage } = useUpdateMessageContext();\n\n  return (\n    <>\n      <TransactionStatusMock type={type} />\n      {Boolean(transactions.length) &&\n        transactions.map((transaction: TransactionStatusType) => {\n          const onComplete = () => {\n            dispatchTransaction(\n              TransactionActionCreators.updateTransactionStatus(\n                { status: TransactionStatusEnum.COMPLETED },\n                transaction.id\n              )\n            );\n            dispatchMessage(\n              MessageActionsCreators.triggerSuccessMessage({\n                message: `Transaction: ${shortenItem(transaction.blockHash)} is completed`\n              })\n            );\n          };\n          return (\n            <TransactionStatus\n              key={transaction.id}\n              transaction={transaction}\n              onComplete={onComplete}\n              transactionDisplayProps={{ ...transactionDisplayProps }}\n            />\n          );\n        })}\n    </>\n  );\n};\n\nexport default Transactions;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { Box, Fade, IconButton } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React, { useCallback } from 'react';\nimport CloseIcon from '@material-ui/icons/Close';\nimport HistoryIcon from '@material-ui/icons/History';\nimport Transactions from './Transactions';\nimport { useGUIContext } from '../contexts/GUIContextProvider';\nimport { ButtonDrawerMenu } from './Buttons';\n\nconst useStyles = makeStyles((theme) => ({\n  drawer: {\n    position: 'absolute',\n    top: 0,\n    left: 200,\n    width: 400,\n    height: '100vh',\n    padding: theme.spacing(2),\n    paddingLeft: theme.spacing(5),\n    paddingTop: theme.spacing(5),\n    overflow: 'auto',\n    '-ms-overflow-style': 'none',\n    'scrollbar-width': 'none',\n    '&::-webkit-scrollbar': {\n      display: 'none'\n    }\n  },\n  closeDrawerIcon: {\n    position: 'fixed',\n    backgroundColor: theme.palette.background.paper,\n    marginLeft: 296,\n    marginTop: theme.spacing(-4)\n  }\n}));\n\nexport const StorageDrawer = () => {\n  const classes = useStyles();\n  const { drawer, setDrawer } = useGUIContext();\n\n  const handleDrawerOpen = useCallback(() => setDrawer(`${drawer === 'open' ? '' : 'open'}`), [drawer, setDrawer]);\n  const handleDrawerClose = useCallback(() => setDrawer(''), [setDrawer]);\n\n  return (\n    <Box mt={4}>\n      <ButtonDrawerMenu\n        startIcon={<HistoryIcon />}\n        onClick={handleDrawerOpen}\n        color={drawer === 'open' ? 'primary' : 'secondary'}\n      >\n        History\n      </ButtonDrawerMenu>\n      <Fade in={drawer === 'open'} timeout={{ enter: 300, exit: 0 }}>\n        <div className={classes.drawer}>\n          <IconButton onClick={handleDrawerClose} color=\"secondary\" className={classes.closeDrawerIcon}>\n            <CloseIcon />\n          </IconButton>\n          <Transactions size=\"sm\" />\n        </div>\n      </Fade>\n    </Box>\n  );\n};\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { Theme } from '@material-ui/core/styles';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\n\ninterface SelectLabelProps {\n  children: string;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  selectLabel: {\n    ...theme.typography.h4,\n    color: theme.palette.text.hint,\n    marginBottom: theme.spacing()\n  }\n}));\n\nexport const styleAccountCompanion = (theme: Theme) => {\n  return {\n    marginTop: -1,\n    padding: theme.spacing(0.5),\n    paddingLeft: theme.spacing(1.25),\n    paddingRight: theme.spacing(3),\n    border: `1px solid ${theme.palette.divider}`,\n    borderTopLeftRadius: 0,\n    borderTopRightRadius: 0,\n    borderRadius: theme.spacing(1.5)\n  };\n};\n\nexport const SelectLabel = ({ children }: SelectLabelProps) => {\n  const classes = useStyles();\n  return <div className={classes.selectLabel}>{children}</div>;\n};\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport grey from '@material-ui/core/colors/grey';\nimport red from '@material-ui/core/colors/red';\nimport { ThemeOptions } from '@material-ui/core/styles';\nimport { PaletteOptions } from '@material-ui/core/styles/createPalette';\nimport { Shadows } from '@material-ui/core/styles/shadows';\n\nexport const bridgesBlue = {\n  100: '#2E99E5',\n  300: '#2E99E5',\n  400: '#2E99E5',\n  500: '#2E99E5'\n};\nexport const substrateGray = {\n  50: '#FCFCFC',\n  100: '#F1F5F7',\n  150: '#F0F2F5',\n  200: '#EAEEF1',\n  400: '#C6D0D7',\n  500: '#ABB8BF',\n  700: '#556068',\n  600: '#7E8D95',\n  800: '#323F47',\n  900: '#202B33'\n};\nexport const substrateGreen = {\n  100: '#7E8D96',\n  200: '#5CFFC8',\n  300: '#18FFB2',\n  400: '#16DB9A',\n  500: '#11B37C',\n  600: '#1A9A6C'\n};\n\nconst paletteLight: PaletteOptions = {\n  type: 'light',\n  common: {\n    black: 'black',\n    white: '#FFFFFF'\n  },\n  background: {\n    paper: '#FFFFFF',\n    default: '#FFFFFF'\n  },\n  primary: {\n    light: bridgesBlue[100],\n    main: bridgesBlue[400],\n    dark: bridgesBlue[500],\n    contrastText: 'white'\n  },\n  secondary: {\n    light: substrateGray[100],\n    main: substrateGray[600],\n    dark: substrateGray[500],\n    contrastText: 'black'\n  },\n  error: {\n    light: red[100],\n    main: '#DC2200',\n    dark: red[500],\n    contrastText: 'black'\n  },\n  success: {\n    light: substrateGreen[100],\n    main: substrateGreen[400],\n    dark: substrateGreen[500],\n    contrastText: 'black'\n  },\n  text: {\n    primary: substrateGray[900],\n    secondary: bridgesBlue[400],\n    disabled: substrateGray[600],\n    hint: substrateGray[600]\n  },\n  action: {\n    active: bridgesBlue[300]\n  },\n  divider: grey[300]\n};\n\nconst shadows: Shadows = [\n  'none',\n  '0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)',\n  '0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)',\n  '0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)',\n  '0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)',\n  '0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)',\n  '0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)',\n  '0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)',\n  '0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)',\n  '0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)',\n  '0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)',\n  '0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)',\n  '0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)',\n  '0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)',\n  '0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)',\n  '0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)',\n  '0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)',\n  '0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)',\n  '0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)',\n  '0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)',\n  '0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)',\n  '0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)',\n  '0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)',\n  '0px 32px 24px rgb(0 0 0 / 5%), 0px 16px 20px rgb(0 0 0 / 4%), 0px 12px 12px rgb(0 0 0 / 4%), 0px 6px 6px rgb(0 0 0 / 3%), 0px 3px 2px rgb(0 0 0 / 2%)',\n  '0px 100px 80px rgba(0, 0, 0, 0.07), 0px 40px 32px rgba(0, 0, 0, 0.05), 0px 20px 20px rgba(0, 0, 0, 0.04), 0px 12px 12px rgba(0, 0, 0, 0.04), 0px 6px 6px rgba(0, 0, 0, 0.03), 0px 3px 2px rgba(0, 0, 0, 0.02)'\n];\n\nexport const light: ThemeOptions = {\n  typography: {\n    allVariants: {\n      color: paletteLight.text && paletteLight.text.primary\n    },\n    fontFamily:\n      'Inter, -apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, Segoe UI, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Web3-Regular\"',\n    h1: {\n      fontWeight: 500,\n      fontSize: 30,\n      lineHeight: '115%',\n      letterSpacing: '-0.02em'\n    },\n    h2: {\n      fontWeight: 600,\n      fontSize: 21,\n      lineHeight: '120%'\n    },\n    h3: {\n      fontWeight: 600,\n      fontSize: 18,\n      lineHeight: '120%'\n    },\n    h4: {\n      fontWeight: 500,\n      fontSize: 14,\n      lineHeight: '120%',\n      color: grey[800]\n    },\n    body1: {\n      fontWeight: 400,\n      fontSize: 14,\n      lineHeight: '140%',\n      color: grey[800]\n    },\n    body2: {\n      fontWeight: 400,\n      fontSize: 12,\n      lineHeight: '140%'\n    },\n    button: {\n      fontWeight: 500,\n      fontSize: 16,\n      lineHeight: '140%',\n      letterSpacing: 0.2,\n      textTransform: 'none'\n    },\n    subtitle1: {\n      fontFamily: 'SFMono-Regular, Consolas , Liberation Mono, Menlo, monospace',\n      fontWeight: 400,\n      fontSize: 20,\n      lineHeight: '120%'\n    },\n    subtitle2: {\n      fontFamily: 'SFMono-Regular, Consolas , Liberation Mono, Menlo, monospace',\n      fontWeight: 400,\n      fontSize: 11,\n      lineHeight: '135%',\n      color: grey[700],\n      letterSpacing: 0.1\n    },\n    overline: {\n      fontWeight: 500,\n      fontSize: 14,\n      letterSpacing: 0.3,\n      textTransform: 'uppercase'\n    }\n  },\n  palette: paletteLight,\n  shadows: shadows\n};\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { Container, Paper } from '@material-ui/core';\nimport { fade, makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\nimport { useGUIContext } from '../contexts/GUIContextProvider';\n\nimport { substrateGray } from './theme';\n\nconst useStyles = makeStyles((theme) => ({\n  ui: {\n    display: 'flex',\n    justifyContent: 'center',\n    padding: theme.spacing(3),\n    paddingLeft: 240 + theme.spacing(3),\n    transition: 'padding-left .1s',\n    '&.open': {\n      paddingLeft: 600 + theme.spacing(3),\n      [theme.breakpoints.down('md')]: {\n        paddingLeft: 240 + theme.spacing(3)\n      }\n    },\n    '& .MuiPaper-root, .MuiOutlinedInput-notchedOutline': {\n      borderRadius: theme.spacing(1.5)\n    },\n    '& > .MuiPaper-root': {\n      width: 480,\n      maxWidth: '100%',\n      padding: theme.spacing(2)\n    }\n  },\n  sidebar: {\n    position: 'fixed',\n    zIndex: 1,\n    display: 'flex',\n    justifyContent: 'space-between',\n    flexDirection: 'column',\n    top: 0,\n    width: 240,\n    height: '100vh',\n    padding: theme.spacing(3),\n    backgroundColor: substrateGray[50],\n    borderRight: `1px solid ${fade(theme.palette.divider, 0.5)}`,\n    transition: 'width .1s, padding-right .1s',\n    '&.open': {\n      width: 600,\n      paddingRight: 360 + theme.spacing(3)\n    }\n  }\n}));\n\ninterface BoxUIProps {\n  children: React.ReactElement[] | React.ReactElement | string;\n}\n\nexport const BoxUI = ({ children }: BoxUIProps) => {\n  const classes = useStyles();\n  const { drawer } = useGUIContext();\n\n  return (\n    <Container className={`${classes.ui} ${drawer}`}>\n      <Paper elevation={24}>{children}</Paper>\n    </Container>\n  );\n};\n\nexport const BoxSidebar = ({ children }: BoxUIProps) => {\n  const classes = useStyles();\n  const { drawer } = useGUIContext();\n  return <div className={`${classes.sidebar} ${drawer}`}>{children}</div>;\n};\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { ButtonBase, Popover } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport React, { useEffect } from 'react';\nimport { MenuActionItemsProps } from '../types/guiTypes';\nimport { TransactionTypes } from '../types/transactionTypes';\n\n// As this is placed as a child in the Material UI Select component, for some reason style components classes are not working.\n// This way to inject the styles works.\nconst useStyles = makeStyles((theme) => ({\n  menu: {\n    background: theme.palette.secondary.light,\n    padding: theme.spacing(),\n    borderRadius: theme.spacing()\n  },\n  item: {\n    ...theme.typography.button,\n    display: 'flex',\n    margin: theme.spacing(0.2),\n    paddingLeft: theme.spacing(0.75),\n    paddingRight: theme.spacing(0.75),\n    borderRadius: theme.spacing(0.5),\n    '&:not(.current):hover': {\n      color: theme.palette.primary.contrastText,\n      background: theme.palette.primary.main\n    },\n    '&.current': {\n      marginBottom: theme.spacing(3),\n      color: theme.palette.text.hint,\n      '&:hover': {\n        color: theme.palette.secondary.contrastText,\n        background: theme.palette.secondary.light\n      }\n    },\n    '&.disabled': {\n      color: theme.palette.text.disabled,\n      pointerEvents: 'none'\n    }\n  }\n}));\n\ninterface MenuActionProps {\n  actions: MenuActionItemsProps[];\n  action: TransactionTypes;\n  changeMenu: (type: TransactionTypes) => void;\n}\n\nexport const MenuAction = ({ actions, changeMenu, action }: MenuActionProps) => {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(null);\n  const [id, setId] = React.useState<string | undefined>(undefined);\n  const [open, setOpen] = React.useState<boolean>(false);\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n    setOpen(!open);\n  };\n\n  useEffect(() => {\n    setOpen(Boolean(anchorEl));\n    setId(anchorEl ? 'simple-popover' : undefined);\n  }, [anchorEl]);\n\n  const item = actions.find(({ type }) => type === action);\n\n  return (\n    <>\n      <ButtonBase className={`${classes.item} current`} onClick={handleClick}>\n        {item?.title || '-'}\n        <ArrowDropDownIcon />\n      </ButtonBase>\n      <Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={() => setOpen(false)}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'right'\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 24\n        }}\n        PaperProps={{\n          className: classes.menu\n        }}\n      >\n        {actions.map((i, n) => (\n          <ButtonBase\n            className={`${classes.item} ${!i.isEnabled && 'disabled'}`}\n            key={n}\n            onClick={() => {\n              setOpen(!open);\n              changeMenu(i.type);\n            }}\n          >\n            {i.title}\n          </ButtonBase>\n        ))}\n      </Popover>\n    </>\n  );\n};\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from 'react';\nimport { Box, Divider, IconButton, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport { useSourceTarget } from '../contexts/SourceTargetContextProvider';\nimport { useSubscriptionsContext } from '../contexts/SubscriptionsContextProvider';\n\nimport useLoadingApi from '../hooks/connections/useLoadingApi';\nimport { IconApiStatus } from './Icons';\n\n// As this is placed as a child in the Material UI Select component, for some reason style components classes are not working.\n// This way to inject the styles works.\nconst useStyles = makeStyles((theme) => ({\n  main: {\n    position: 'relative',\n    border: `1px solid ${theme.palette.divider}`,\n    borderRadius: theme.spacing(0.5),\n    '& .MuiIconButton-root': {\n      backgroundColor: theme.palette.background.paper,\n      position: 'absolute',\n      top: 0,\n      bottom: 0,\n      right: theme.spacing(-1.5),\n      width: theme.spacing(3),\n      height: theme.spacing(3),\n      margin: 'auto',\n      border: `1px solid ${theme.palette.divider}`\n    }\n  },\n  statsEntry: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingRight: theme.spacing(),\n    fontSize: theme.typography.subtitle2.fontSize,\n    '& span': {\n      ...theme.typography.subtitle2\n    }\n  },\n  svg: {\n    marginBottom: '0.2em',\n    fontSize: '0.5em',\n    marginRight: theme.spacing()\n  }\n}));\n\nexport const NetworkSides = () => {\n  const classes = useStyles();\n  const { sourceSubscriptions, targetSubscriptions } = useSubscriptionsContext();\n  const { sourceChainDetails, targetChainDetails } = useSourceTarget();\n  const { sourceReady, targetReady } = useLoadingApi();\n\n  return (\n    <Box marginY={2} className={classes.main}>\n      <Box p={1} className={classes.statsEntry}>\n        <Typography variant=\"h4\">\n          <IconApiStatus className={classes.svg} status={sourceReady} />\n          <a target=\"_blank\" rel=\"noreferrer\" href={sourceChainDetails.polkadotjsUrl}>\n            {sourceChainDetails.chain}\n          </a>\n        </Typography>\n        <span># {sourceSubscriptions.bestBlock}</span>\n      </Box>\n      <Divider />\n      <IconButton size=\"small\">\n        <ArrowDownwardIcon fontSize=\"small\" />\n      </IconButton>\n      <Box p={1} className={classes.statsEntry}>\n        <Typography variant=\"h4\">\n          <IconApiStatus className={classes.svg} status={targetReady} />\n          <a target=\"_blank\" rel=\"noreferrer\" href={targetChainDetails.polkadotjsUrl}>\n            {targetChainDetails.chain}\n          </a>\n        </Typography>\n        <span style={{ opacity: 0.4 }}># {targetSubscriptions.bestBlock}</span>\n      </Box>\n    </Box>\n  );\n};\n\nexport const NetworkStats = () => {\n  const classes = useStyles();\n  const { sourceSubscriptions, targetSubscriptions } = useSubscriptionsContext();\n\n  return (\n    <>\n      <Box className={classes.statsEntry}>\n        Relayed blocks:\n        <span>\n          {targetSubscriptions?.bestBridgedFinalizedBlock} / {sourceSubscriptions?.bestBlockFinalized}\n        </span>\n      </Box>\n      <Box className={classes.statsEntry}>\n        Delivered messages:\n        <span>{sourceSubscriptions?.outboundLanes.totalMessages}</span>\n      </Box>\n      <Box className={classes.statsEntry}>\n        Awaiting messages:\n        <span>{sourceSubscriptions?.outboundLanes.pendingMessages}</span>\n      </Box>\n    </>\n  );\n};\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\nimport React from 'react';\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\n\nexport function Alert(props: JSX.IntrinsicAttributes & AlertProps) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { useRef, useEffect } from 'react';\n\nexport default function usePrevious(value: any) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { useEffect } from 'react';\nimport { useUpdateTransactionContext } from '../../contexts/TransactionContext';\nimport { TransactionActionCreators } from '../../actions/transactionActions';\nimport usePrevious from '../react/usePrevious';\n\nconst useResetTransactionState = (action: string | number | undefined) => {\n  const { dispatchTransaction } = useUpdateTransactionContext();\n  const prevAction = usePrevious(action);\n\n  useEffect(() => {\n    if (prevAction === action) {\n      dispatchTransaction(TransactionActionCreators.reset());\n    }\n  }, [dispatchTransaction, prevAction, action]);\n};\n\nexport default useResetTransactionState;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useContext, useState } from 'react';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core';\nimport useLocalStorage from '../hooks/transactions/useLocalStorage';\nimport { TransactionTypes } from '../types/transactionTypes';\nimport { light } from '../components';\nimport { MenuActionItemsProps } from '../types/guiTypes';\nimport useResetTransactionState from '../hooks/transactions/useResetTransactionState';\ninterface DrawerContextProps {\n  drawer: string;\n  setDrawer: React.Dispatch<React.SetStateAction<string>>;\n  actions: MenuActionItemsProps[];\n  action: TransactionTypes;\n  setAction: (type: TransactionTypes) => void;\n}\ninterface GUIContextProviderProps {\n  children: React.ReactElement;\n}\n\nconst DrawerContext = React.createContext({} as DrawerContextProps);\n\nconst actions = [\n  {\n    title: 'Transfer',\n    isEnabled: true,\n    type: TransactionTypes.TRANSFER\n  },\n  {\n    title: 'Remark',\n    isEnabled: true,\n    type: TransactionTypes.REMARK\n  },\n  {\n    title: 'Custom Call',\n    isEnabled: true,\n    type: TransactionTypes.CUSTOM\n  }\n];\n\nexport function useGUIContext() {\n  return useContext(DrawerContext);\n}\n\nexport function GUIContextProvider({ children }: GUIContextProviderProps): React.ReactElement {\n  const [drawer, setDrawer] = useLocalStorage('storageDrawer');\n  const [action, setAction] = useState<TransactionTypes>(TransactionTypes.TRANSFER);\n  const value = { drawer, setDrawer, actions, action, setAction };\n  useResetTransactionState(action);\n\n  return (\n    <ThemeProvider theme={createMuiTheme(light)}>\n      <DrawerContext.Provider value={value}>{children}</DrawerContext.Provider>\n    </ThemeProvider>\n  );\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { ApiPromise } from '@polkadot/api';\nimport { TypeRegistry } from '@polkadot/types';\nimport isEmpty from 'lodash/isEmpty';\nimport React, { useEffect, useState } from 'react';\nimport { ApiPromiseConnectionType, Configs, ConnectionChainInformation } from '../../types/sourceTargetTypes';\nimport logger from '../../util/logger';\nimport { getConfigs } from '../../util/getConfigs';\n\nexport const ApiPromiseContext: React.Context<ApiPromiseConnectionType> = React.createContext(\n  {} as ApiPromiseConnectionType\n);\n\nconst registry = new TypeRegistry();\n\ntype ConfigsType = {\n  configs: Configs;\n};\n\ntype PolkadotJsURL = {\n  polkadotjsUrl: string;\n};\n\ntype ConnectionType = ApiPromiseConnectionType & ConfigsType & PolkadotJsURL;\n\nexport function useApiConnection(connectionDetails: ConnectionChainInformation): ConnectionType {\n  const [apiPromise, setApiPromise] = useState<ApiPromise>({} as ApiPromise);\n  const [isReady, setIsReady] = useState(false);\n  const [configs, setConfigs] = useState<Configs>({} as Configs);\n  const { chainNumber, hasher, provider, types, polkadotjsUrl } = connectionDetails;\n\n  useEffect(() => {\n    ApiPromise.create({ hasher: hasher || undefined, provider, types })\n      .then((api): void => {\n        logger.info(`Chain ${chainNumber}: connection created.`);\n        setApiPromise(api);\n      })\n      .catch((err): void => {\n        logger.error(`Chain ${chainNumber}: Error creating connection. Details: ${err}`);\n      });\n  }, [chainNumber, hasher, provider, types]);\n\n  useEffect(() => {\n    !isReady &&\n      apiPromise &&\n      apiPromise.isReady &&\n      apiPromise.isReady\n        .then(() => {\n          if (types) {\n            registry.register(types);\n          }\n          logger.info(`Chain ${chainNumber}: types registration ready`);\n          setIsReady(true);\n        })\n        .catch((err): void => {\n          logger.error(`Chain ${chainNumber}: Error registering types. Details: ${err}`);\n        });\n  }, [apiPromise, apiPromise.isReady, chainNumber, isReady, types]);\n\n  useEffect(() => {\n    const getChainConfigs = async () => {\n      if (await apiPromise.isReady) {\n        const values = await getConfigs(apiPromise);\n        setConfigs(values);\n      }\n    };\n\n    if (isEmpty(configs)) {\n      getChainConfigs();\n    }\n  }, [apiPromise, apiPromise.isReady, configs]);\n\n  return { api: apiPromise, isApiReady: isReady, configs, polkadotjsUrl };\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { useCallback } from 'react';\ninterface DispatchGenericCallInput {\n  call: Function;\n  dispatch: (error: string | null, data: any, loading: boolean) => void;\n}\n\nexport const useDispatchGenericCall = ({ call, dispatch }: DispatchGenericCallInput) => {\n  const execute = useCallback(\n    async (...params: any[]) => {\n      let data;\n      let error;\n      try {\n        dispatch(null, null, true);\n        data = await call(...params);\n        dispatch(null, data, false);\n      } catch (e) {\n        error = e;\n        dispatch(e, null, false);\n      }\n      return { data, error };\n    },\n    [call, dispatch]\n  );\n\n  return {\n    execute\n  };\n};\n\nexport default useDispatchGenericCall;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { useCallback } from 'react';\nimport { useApiCallsContext } from '../../contexts/ApiCallsContextProvider';\nimport { useSourceTarget } from '../../contexts/SourceTargetContextProvider';\nimport { TransactionActionCreators } from '../../actions/transactionActions';\nimport { useUpdateTransactionContext } from '../../contexts/TransactionContext';\nimport { getSubstrateDynamicNames } from '../../util/getSubstrateDynamicNames';\nimport useDispatchGenericCall from '../api/useDispatchGenericCall';\nimport useLaneId from '../chain/useLaneId';\nimport type { InterfaceTypes } from '@polkadot/types/types';\n\nexport const useEstimateFee = () => {\n  const { createType, stateCall } = useApiCallsContext();\n  const laneId = useLaneId();\n  const {\n    sourceChainDetails: { chain: sourceChain },\n    targetChainDetails: { chain: targetChain }\n  } = useSourceTarget();\n  const { dispatchTransaction } = useUpdateTransactionContext();\n  const { estimatedFeeMethodName } = getSubstrateDynamicNames(targetChain);\n  const estimateFeeCallback = useCallback(\n    async (payloadInput: Object | null) => {\n      if (!payloadInput) {\n        return null;\n      }\n\n      // Ignoring custom types missed for TS for now.\n      // Need to apply: https://polkadot.js.org/docs/api/start/typescript.user\n      const payloadType = createType(sourceChain as keyof InterfaceTypes, 'OutboundPayload', payloadInput);\n      const messageFeeType = createType(sourceChain as keyof InterfaceTypes, 'MessageFeeData', {\n        lane_id: laneId,\n        payload: payloadType.toHex()\n      });\n\n      const estimatedFeeCall = await stateCall(sourceChain, estimatedFeeMethodName, messageFeeType.toHex());\n\n      const estimatedFeeType = createType(sourceChain as keyof InterfaceTypes, 'Option<Balance>', estimatedFeeCall);\n      const estimatedFee = estimatedFeeType.toString();\n      return estimatedFee;\n    },\n    [createType, estimatedFeeMethodName, laneId, sourceChain, stateCall]\n  );\n\n  const dispatch = useCallback(\n    (error: string | null, data: any, loading: boolean) =>\n      dispatchTransaction(TransactionActionCreators.setEstimatedFee(error, data, loading)),\n    [dispatchTransaction]\n  );\n\n  const { execute: calculateEstimateFee } = useDispatchGenericCall({\n    call: estimateFeeCallback,\n    dispatch\n  });\n\n  return calculateEstimateFee;\n};\n\nexport default useEstimateFee;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { compactAddLength } from '@polkadot/util';\nimport { useAccountContext } from '../../contexts/AccountContextProvider';\nimport { useCallback } from 'react';\nimport { useApiCallsContext } from '../../contexts/ApiCallsContextProvider';\nimport { useSourceTarget } from '../../contexts/SourceTargetContextProvider';\nimport { TransactionActionCreators } from '../../actions/transactionActions';\nimport { useUpdateTransactionContext, useTransactionContext } from '../../contexts/TransactionContext';\nimport useDispatchGenericCall from '../api/useDispatchGenericCall';\nimport logger from '../../util/logger';\nimport type { InterfaceTypes } from '@polkadot/types/types';\n\ninterface Input {\n  input: string;\n  call: Uint8Array | null;\n  weight: number | null;\n}\n\nexport const usePayload = () => {\n  const { createType } = useApiCallsContext();\n  const {\n    sourceChainDetails: { chain: sourceChain },\n    targetChainDetails: {\n      apiConnection: { api: targetApi }\n    }\n  } = useSourceTarget();\n  const { dispatchTransaction } = useUpdateTransactionContext();\n  const { receiverAddress } = useTransactionContext();\n  const { account } = useAccountContext();\n\n  const payloadCallback = useCallback(\n    ({ call, weight }: Input) => {\n      if (!account || !call || !weight || !receiverAddress) {\n        return null;\n      }\n\n      const payload = {\n        call: compactAddLength(call!),\n        origin: {\n          SourceAccount: account!.addressRaw\n        },\n        spec_version: targetApi.consts.system.version.specVersion.toNumber(),\n        weight\n      };\n\n      const payloadType = createType(sourceChain as keyof InterfaceTypes, 'OutboundPayload', payload);\n      logger.info(`OutboundPayload: ${JSON.stringify(payload)}`);\n      logger.info(`OutboundPayload.toHex(): ${payloadType.toHex()}`);\n      return payload;\n    },\n    [account, createType, receiverAddress, sourceChain, targetApi.consts.system.version.specVersion]\n  );\n\n  const dispatch = useCallback(\n    (error: string | null, data: any) => dispatchTransaction(TransactionActionCreators.setPayload(error, data)),\n    [dispatchTransaction]\n  );\n\n  const { execute } = useDispatchGenericCall({\n    call: payloadCallback,\n    dispatch\n  });\n\n  return execute;\n};\n\nexport default usePayload;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { useEffect } from 'react';\nimport { useTransactionContext } from '../../contexts/TransactionContext';\nimport useTransactionType from './useTransactionType';\nimport useEstimateFee from './useEstimateFee';\nimport usePayload from './usePayload';\n\ninterface Props {\n  input: string;\n  type: string;\n  weightInput?: string;\n  isValidCall?: boolean;\n}\n\nexport default function useTransactionPreparation({ input, type, weightInput, isValidCall = true }: Props) {\n  const { payload } = useTransactionContext();\n  const { call, weight } = useTransactionType({ input, type, weightInput });\n\n  const calculateFee = useEstimateFee();\n  const updatePayload = usePayload();\n\n  useEffect(() => {\n    calculateFee(payload);\n  }, [calculateFee, payload]);\n\n  useEffect(() => {\n    if (!isValidCall) {\n      return;\n    }\n\n    updatePayload({ call, weight });\n  }, [call, isValidCall, updatePayload, weight]);\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { hexToU8a, isHex, u8aToHex } from '@polkadot/util';\nimport { useEffect, useState } from 'react';\n\nimport { useAccountContext } from '../../contexts/AccountContextProvider';\nimport { useSourceTarget } from '../../contexts/SourceTargetContextProvider';\nimport { useTransactionContext } from '../../contexts/TransactionContext';\nimport useLoadingApi from '../connections/useLoadingApi';\nimport { TransactionTypes } from '../../types/transactionTypes';\nimport logger from '../../util/logger';\n\ninterface TransactionFunction {\n  call: Uint8Array | null;\n  weight: number | null;\n}\n\ninterface Props {\n  input: string;\n  type: string;\n  weightInput?: string;\n}\n\nexport default function useTransactionType({ input, type, weightInput }: Props): TransactionFunction {\n  const { areApiReady } = useLoadingApi();\n  const {\n    targetChainDetails: {\n      apiConnection: { api: targetApi }\n    }\n  } = useSourceTarget();\n\n  const { account } = useAccountContext();\n  const { receiverAddress, transferAmount } = useTransactionContext();\n\n  const [values, setValues] = useState<TransactionFunction>({\n    call: null,\n    weight: null\n  });\n\n  useEffect(() => {\n    async function getValues() {\n      let weight: number = 0;\n      let call: Uint8Array | null = null;\n\n      if (account) {\n        switch (type) {\n          case TransactionTypes.REMARK:\n            call = (await targetApi.tx.system.remark(input)).toU8a();\n            logger.info(`system::remark: ${u8aToHex(call)}`);\n            // TODO [#121] Figure out what the extra bytes are about\n            call = call.slice(2);\n            weight = (await targetApi.tx.system.remark(input).paymentInfo(account)).weight.toNumber();\n            break;\n          case TransactionTypes.TRANSFER:\n            if (receiverAddress) {\n              call = (await targetApi.tx.balances.transfer(receiverAddress, transferAmount || 0)).toU8a();\n              logger.info(`balances::transfer: ${u8aToHex(call)}`);\n              // TODO [#121] Figure out what the extra bytes are about\n              call = call.slice(2);\n              weight = (\n                await targetApi.tx.balances.transfer(receiverAddress, transferAmount || 0).paymentInfo(account)\n              ).weight.toNumber();\n            }\n            break;\n          case TransactionTypes.CUSTOM:\n            call = isHex(input) ? hexToU8a(input) : null;\n            weight = parseInt(weightInput!);\n            break;\n          default:\n            throw new Error(`Unknown type: ${type}`);\n        }\n        setValues({ call, weight });\n      }\n    }\n\n    if (areApiReady) {\n      getValues();\n    }\n  }, [\n    account,\n    areApiReady,\n    input,\n    receiverAddress,\n    targetApi.tx.balances,\n    targetApi.tx.system,\n    transferAmount,\n    type,\n    weightInput\n  ]);\n\n  return values;\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { useCallback } from 'react';\nimport { SignerOptions } from '@polkadot/api/types';\nimport { web3FromSource } from '@polkadot/extension-dapp';\nimport type { KeyringPair } from '@polkadot/keyring/types';\nimport type { InterfaceTypes } from '@polkadot/types/types';\nimport moment from 'moment';\nimport { MessageActionsCreators } from '../../actions/messageActions';\nimport { TransactionActionCreators } from '../../actions/transactionActions';\nimport { useAccountContext } from '../../contexts/AccountContextProvider';\nimport { useUpdateMessageContext } from '../../contexts/MessageContext';\nimport { useSourceTarget } from '../../contexts/SourceTargetContextProvider';\nimport { useTransactionContext, useUpdateTransactionContext } from '../../contexts/TransactionContext';\nimport useLaneId from './useLaneId';\nimport useTransactionPreparation from '../transactions/useTransactionPreparation';\nimport { TransactionStatusEnum, TransactionTypes } from '../../types/transactionTypes';\nimport { getSubstrateDynamicNames } from '../../util/getSubstrateDynamicNames';\nimport { getTransactionDisplayPayload } from '../../util/transactionUtils';\nimport logger from '../../util/logger';\nimport useApiCalls from '../api/useApiCalls';\nimport useLoadingApi from '../connections/useLoadingApi';\n\ninterface Props {\n  isValidCall?: boolean;\n  input: string;\n  type: string;\n  weightInput?: string;\n}\n\nfunction useSendMessage({ isValidCall, input, type, weightInput }: Props) {\n  const { estimatedFee, receiverAddress, payload, transactionRunning } = useTransactionContext();\n  const { dispatchTransaction } = useUpdateTransactionContext();\n  const laneId = useLaneId();\n  const sourceTargetDetails = useSourceTarget();\n  const {\n    sourceChainDetails: {\n      apiConnection: { api: sourceApi },\n      chain: sourceChain\n    },\n    targetChainDetails: { chain: targetChain }\n  } = sourceTargetDetails;\n  const { account } = useAccountContext();\n  useTransactionPreparation({ input, isValidCall, type, weightInput });\n  const { createType } = useApiCalls();\n  const { dispatchMessage } = useUpdateMessageContext();\n\n  const makeCall = useCallback(\n    async (id: string) => {\n      try {\n        if (!account || !payload) {\n          return;\n        }\n\n        const payloadType = createType(sourceChain as keyof InterfaceTypes, 'OutboundPayload', payload);\n        const payloadHex = payloadType.toHex();\n\n        const { bridgedMessages } = getSubstrateDynamicNames(targetChain);\n        const bridgeMessage = sourceApi.tx[bridgedMessages].sendMessage(laneId, payload, estimatedFee);\n        logger.info(`bridge::sendMessage ${bridgeMessage.toHex()}`);\n        const options: Partial<SignerOptions> = {\n          nonce: -1\n        };\n        let sourceAccount: string | KeyringPair = account;\n        if (account.meta.isInjected) {\n          const injector = await web3FromSource(account.meta.source as string);\n          options.signer = injector.signer;\n          sourceAccount = account.address;\n        }\n\n        const { transactionDisplayPayload } = getTransactionDisplayPayload({\n          payload,\n          account: account.address,\n          createType,\n          sourceTargetDetails\n        });\n\n        const unsub = await bridgeMessage.signAndSend(sourceAccount, { ...options }, ({ events = [], status }) => {\n          if (status.isReady) {\n            dispatchTransaction(\n              TransactionActionCreators.createTransactionStatus({\n                block: null,\n                blockHash: null,\n                id,\n                input,\n                messageNonce: null,\n                receiverAddress,\n                sourceAccount: account.address,\n                sourceChain,\n                status: TransactionStatusEnum.CREATED,\n                targetChain,\n                type,\n                payloadHex,\n                transactionDisplayPayload\n              })\n            );\n          }\n\n          if (status.isBroadcast) {\n            dispatchMessage(MessageActionsCreators.triggerInfoMessage({ message: 'Transaction was broadcasted' }));\n            dispatchTransaction(TransactionActionCreators.reset());\n          }\n\n          if (status.isInBlock) {\n            events.forEach(({ event: { data, method } }) => {\n              if (method.toString() === 'MessageAccepted') {\n                const messageNonce = data.toArray()[1].toString();\n                sourceApi.rpc.chain\n                  .getBlock(status.asInBlock)\n                  .then((res) => {\n                    const block = res.block.header.number.toString();\n                    dispatchTransaction(\n                      TransactionActionCreators.updateTransactionStatus(\n                        {\n                          block,\n                          blockHash: status.asInBlock.toString(),\n                          messageNonce,\n                          status: TransactionStatusEnum.IN_PROGRESS\n                        },\n                        id\n                      )\n                    );\n                  })\n                  .catch((e) => {\n                    logger.error(e.message);\n                    throw new Error('Issue reading block information.');\n                  });\n              }\n            });\n          }\n\n          if (status.isFinalized) {\n            logger.info(`Transaction finalized at blockHash ${status.asFinalized}`);\n\n            unsub();\n          }\n        });\n      } catch (e) {\n        dispatchMessage(MessageActionsCreators.triggerErrorMessage({ message: e.message }));\n        logger.error(e.message);\n      } finally {\n        dispatchTransaction(TransactionActionCreators.setTransactionRunning(false));\n      }\n    },\n    [\n      account,\n      createType,\n      dispatchMessage,\n      dispatchTransaction,\n      estimatedFee,\n      input,\n      laneId,\n      payload,\n      receiverAddress,\n      sourceApi.rpc.chain,\n      sourceApi.tx,\n      sourceChain,\n      sourceTargetDetails,\n      targetChain,\n      type\n    ]\n  );\n\n  const sendLaneMessage = useCallback(() => {\n    const id = moment().format('x');\n    dispatchTransaction(TransactionActionCreators.setTransactionRunning(true));\n    return makeCall(id);\n  }, [dispatchTransaction, makeCall]);\n\n  const { areApiReady } = useLoadingApi();\n\n  const isButtonDisabled = useCallback(() => {\n    switch (type) {\n      case TransactionTypes.REMARK:\n        return transactionRunning || !account || !areApiReady;\n        break;\n      case TransactionTypes.CUSTOM:\n        return transactionRunning || !account || !input || !weightInput || !isValidCall || !areApiReady;\n        break;\n      default:\n        throw new Error(`Unknown type: ${type}`);\n    }\n  }, [account, areApiReady, input, isValidCall, transactionRunning, type, weightInput]);\n\n  return { sendLaneMessage, isButtonDisabled };\n}\n\nexport default useSendMessage;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { useEffect, useState } from 'react';\nimport { Typography, makeStyles } from '@material-ui/core';\nimport React from 'react';\nimport { useSourceTarget } from '../contexts/SourceTargetContextProvider';\nimport { useTransactionContext } from '../contexts/TransactionContext';\nimport { transformToBaseUnit } from '../util/evalUnits';\n\nconst useStyles = makeStyles(() => ({\n  container: {\n    minHeight: '20px'\n  }\n}));\n\nexport const EstimatedFee = (): React.ReactElement => {\n  const classes = useStyles();\n  const { sourceChainDetails, targetChainDetails } = useSourceTarget();\n  const { estimatedFee, estimatedFeeLoading } = useTransactionContext();\n  const srcChainDecimals = sourceChainDetails.apiConnection.api.registry.chainDecimals[0];\n  const { chainTokens } = targetChainDetails.apiConnection.api.registry;\n\n  const [amount, setAmount] = useState<string | null>(null);\n\n  useEffect(() => {\n    !estimatedFeeLoading && setAmount(estimatedFee ? transformToBaseUnit(estimatedFee, srcChainDecimals) : null);\n  }, [estimatedFee, estimatedFeeLoading, srcChainDecimals]);\n\n  const feeLabel = `Estimated ${sourceChainDetails.chain} fee`;\n\n  return (\n    <div className={classes.container}>\n      <Typography variant=\"body1\" color=\"secondary\">\n        {estimatedFeeLoading ? `${feeLabel}...` : amount ? `${feeLabel}: ${amount} ${chainTokens}` : null}\n      </Typography>\n    </div>\n  );\n};\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { useCallback, useMemo, useState, Dispatch, useEffect } from 'react';\nimport usePrevious from './usePrevious';\nimport debounce from 'lodash/debounce';\n\ntype Output<T> = [T, (value: T) => void, T];\n\ninterface Input<T> {\n  initialValue: T;\n  wait?: number;\n  transformCallback?: (value: T) => void;\n  dispatchCallback?: Dispatch<T>;\n}\n\nexport const useDebounceState = <T>({\n  initialValue,\n  wait = 500,\n  transformCallback,\n  dispatchCallback\n}: Input<T>): Output<T> => {\n  const [value, setValue] = useState(initialValue);\n  const [debounced, setDebounced] = useState(initialValue);\n  const previousDebounced = usePrevious(debounced);\n  const setDebouncedCallback = useMemo(() => debounce((value) => setDebounced(value), wait), [wait]);\n\n  const setValueCallback = useCallback(\n    (value: T) => {\n      setValue(value);\n      if (transformCallback) {\n        const transformedValue = transformCallback(value);\n        setDebouncedCallback(transformedValue);\n      } else {\n        setDebouncedCallback(value);\n      }\n    },\n    [setDebouncedCallback, transformCallback]\n  );\n\n  useEffect(() => {\n    previousDebounced !== debounced && dispatchCallback && dispatchCallback(debounced);\n  }, [debounced, dispatchCallback, previousDebounced]);\n\n  return [value, setValueCallback, debounced];\n};\n\nexport default useDebounceState;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport type { InterfaceTypes } from '@polkadot/types/types';\n\nimport React, { useState, useCallback } from 'react';\nimport { Box, TextField } from '@material-ui/core';\nimport { ButtonSubmit } from '../components';\nimport { useSourceTarget } from '../contexts/SourceTargetContextProvider';\nimport useSendMessage from '../hooks/chain/useSendMessage';\nimport useApiCalls from '../hooks/api/useApiCalls';\nimport { TransactionTypes } from '../types/transactionTypes';\nimport { EstimatedFee } from './EstimatedFee';\nimport useDebounceState from '../hooks/react/useDebounceState';\nimport logger from '../util/logger';\n\nconst initialValue = '0x';\n\nconst CustomCall = () => {\n  const [decoded, setDecoded] = useState<string | null>();\n\n  const [currentCustomCallInput, setCustomCallInput, customCallDebouncedInput] = useDebounceState({ initialValue });\n  const [currentWeightInput, setWeightInput, weightDebouncedInput] = useDebounceState({ initialValue: '' });\n\n  const [error, setError] = useState<string | null>();\n  const { sourceChainDetails, targetChainDetails } = useSourceTarget();\n\n  const {\n    targetChainDetails: { chain: targetChain }\n  } = useSourceTarget();\n  const { createType } = useApiCalls();\n\n  const { isButtonDisabled, sendLaneMessage } = useSendMessage({\n    input: customCallDebouncedInput,\n    isValidCall: Boolean(decoded),\n    type: TransactionTypes.CUSTOM,\n    weightInput: weightDebouncedInput\n  });\n  const onChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const input = event.target.value;\n      try {\n        setError(null);\n        setCustomCallInput(input);\n        const call = createType(targetChain as keyof InterfaceTypes, 'Call', input);\n        setDecoded(JSON.stringify(call, null, 4));\n      } catch (e) {\n        logger.error('Wrong call', e);\n        setError('Wrong call provided');\n        setDecoded(null);\n      }\n    },\n    [createType, setCustomCallInput, targetChain]\n  );\n\n  const onWeightChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      setWeightInput(event.target.value);\n    },\n    [setWeightInput]\n  );\n\n  // To extract estimated fee logic to specific component. Issue #171\n  return (\n    <>\n      <Box mb={2}>\n        <TextField\n          onChange={onChange}\n          value={currentCustomCallInput}\n          placeholder={initialValue}\n          label=\"Call\"\n          variant=\"outlined\"\n          fullWidth\n          helperText={error && `${error}`}\n        />\n      </Box>\n      <TextField onChange={onWeightChange} value={currentWeightInput} label=\"Weight\" variant=\"outlined\" fullWidth />\n      <ButtonSubmit disabled={isButtonDisabled()} onClick={sendLaneMessage}>\n        Send custom call from {sourceChainDetails.chain} to {targetChainDetails.chain}\n      </ButtonSubmit>\n      <EstimatedFee />\n    </>\n  );\n};\n\nexport default CustomCall;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\nimport React from 'react';\nimport { Alert } from '.';\nimport { useKeyringContext } from '../contexts/KeyringContextProvider';\nimport useLoadingApi from '../hooks/connections/useLoadingApi';\n\ninterface Props {\n  component: JSX.Element;\n}\n\n// TODO #176: Move this to a more generic error-show component\nconst statusFunc = (from: string, state: boolean) => `${from} chain status: ${!state ? 'disconnected' : 'connected'}`;\n\nconst ExtensionAccountCheck = ({ component }: Props): JSX.Element => {\n  const { extensionExists, accountExists } = useKeyringContext();\n  // TODO #176: Move this to a more generic error-show component\n  const { sourceReady, targetReady } = useLoadingApi();\n  const isDevelopment = process.env.REACT_APP_IS_DEVELOPMENT === 'true';\n\n  let msg: string = '';\n  if (isDevelopment) {\n    return component;\n  }\n\n  if (!extensionExists) {\n    msg = 'Connect to a wallet. Install polkadotjs extension';\n  } else if (!accountExists) {\n    msg = 'There are no accounts in the extension. Please create one';\n    // TODO #176: Move this to a more generic error-show component\n  } else if (!sourceReady || !targetReady) {\n    msg = `${!sourceReady ? statusFunc('Source', sourceReady) : ''} ${\n      !targetReady ? statusFunc('Target', targetReady) : ''\n    }`;\n  }\n\n  return <>{msg ? <Alert severity=\"error\">{msg}</Alert> : component}</>;\n};\n\nexport default ExtensionAccountCheck;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { TextField } from '@material-ui/core';\nimport React from 'react';\nimport { ButtonSubmit } from '../components';\nimport { useSourceTarget } from '../contexts/SourceTargetContextProvider';\nimport useSendMessage from '../hooks/chain/useSendMessage';\nimport { TransactionTypes } from '../types/transactionTypes';\nimport { EstimatedFee } from './EstimatedFee';\nimport useDebounceState from '../hooks/react/useDebounceState';\n\nconst initialValue = '0x';\n\nconst Remark = () => {\n  const [currentInput, setRemarkInput, remarkDebouncedInput] = useDebounceState({ initialValue });\n  const { sourceChainDetails, targetChainDetails } = useSourceTarget();\n\n  const { isButtonDisabled, sendLaneMessage } = useSendMessage({\n    input: remarkDebouncedInput,\n    type: TransactionTypes.REMARK\n  });\n\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRemarkInput(event.target.value);\n  };\n\n  // To extract estimated fee logic to specific component. Issue #171\n  return (\n    <>\n      <TextField\n        label=\"Remark\"\n        value={currentInput}\n        variant=\"outlined\"\n        fullWidth\n        multiline\n        rows={4}\n        onChange={onChange}\n      />\n      <ButtonSubmit disabled={isButtonDisabled()} onClick={sendLaneMessage}>\n        Send bridge remark from {sourceChainDetails.chain} to {targetChainDetails.chain}\n      </ButtonSubmit>\n      <EstimatedFee />\n    </>\n  );\n};\n\nexport default Remark;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { useCallback } from 'react';\nimport type { KeyringPair } from '@polkadot/keyring/types';\nimport { encodeAddress } from '@polkadot/util-crypto';\nimport { AccountActionCreators } from '../../actions/accountActions';\nimport { SourceTargetActionsCreators } from '../../actions/sourceTargetActions';\nimport { useUpdateAccountContext } from '../../contexts/AccountContextProvider';\nimport { useUpdateSourceTarget } from '../../contexts/SourceTargetContextProvider';\nimport { useAccountContext } from '../../contexts/AccountContextProvider';\nimport { useSourceTarget } from '../../contexts/SourceTargetContextProvider';\nimport useChainGetters from '../chain/useChainGetters';\n\ninterface Accounts {\n  accounts: Array<KeyringPair> | [];\n  setCurrentAccount: (value: string, chain: string) => void;\n}\n\nconst useAccounts = (): Accounts => {\n  const { dispatchAccount } = useUpdateAccountContext();\n  const { dispatchChangeSourceTarget } = useUpdateSourceTarget();\n  const sourceTarget = useSourceTarget();\n  const { accounts } = useAccountContext();\n  const { getSS58PrefixByChain } = useChainGetters();\n\n  const setCurrentAccount = useCallback(\n    (value: string, chain: string) => {\n      const ss58Format = getSS58PrefixByChain(chain);\n\n      const account = accounts.find(({ address }) => encodeAddress(address, ss58Format) === value);\n      if (account) {\n        dispatchChangeSourceTarget(SourceTargetActionsCreators.switchChains(chain));\n        dispatchAccount(AccountActionCreators.setAccount(account, sourceTarget));\n      }\n    },\n    [accounts, dispatchAccount, dispatchChangeSourceTarget, getSS58PrefixByChain, sourceTarget]\n  );\n\n  return {\n    accounts,\n    setCurrentAccount\n  };\n};\n\nexport default useAccounts;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\nimport { ApiPromise } from '@polkadot/api';\nimport { INCORRECT_FORMAT, GENERIC } from '../../constants';\nimport { useSourceTarget } from '../../contexts/SourceTargetContextProvider';\nimport { getBridgeId } from '../../util/getConfigs';\nimport getDeriveAccount from '../../util/getDeriveAccount';\n\ntype State = {\n  address: string;\n  api: ApiPromise;\n};\n\nconst useApiBalance = (address: string | null, chain: string | undefined | null, isDerived: boolean): State => {\n  const {\n    sourceChainDetails: {\n      apiConnection: { api: sourceApi },\n      configs: sourceConfigs\n    },\n    targetChainDetails: {\n      apiConnection: { api: targetApi },\n      chain: targetChain,\n      configs: targetConfigs\n    }\n  } = useSourceTarget();\n\n  if (!chain || !address || chain === INCORRECT_FORMAT || chain === GENERIC) {\n    return { address: '', api: {} as ApiPromise };\n  }\n\n  const ss58Format = chain === targetChain ? targetConfigs.ss58Format : sourceConfigs.ss58Format;\n  const bridgeId =\n    chain === targetChain\n      ? getBridgeId(targetConfigs, sourceConfigs.chainName)\n      : getBridgeId(sourceConfigs, targetConfigs.chainName);\n\n  const addressResult = !isDerived\n    ? address\n    : getDeriveAccount({\n        ss58Format,\n        address,\n        bridgeId\n      });\n\n  const processedApi = chain === targetChain ? targetApi : sourceApi;\n\n  return { address: addressResult, api: processedApi };\n};\n\nexport default useApiBalance;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport React from 'react';\n\ninterface Props {\n  balance?: string | null | undefined;\n  onClick?: () => void;\n  id?: string | undefined;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  balances: {\n    whiteSpace: 'nowrap',\n    ...theme.typography.subtitle2\n  }\n}));\n\nconst Balance = ({ balance, onClick, id }: Props) => {\n  const classes = useStyles();\n  return (\n    <div onClick={onClick} className={classes.balances} id={id}>\n      {balance || ''}\n    </div>\n  );\n};\n\nexport default Balance;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Identicon from '@polkadot/react-identicon';\nimport { INCORRECT_FORMAT } from '../constants';\nimport { useUpdateMessageContext } from '../contexts/MessageContext';\nimport { MessageActionsCreators } from '../actions/messageActions';\n\nimport ctx from 'classnames';\nimport React, { useCallback } from 'react';\nimport { IdentityProps } from '@polkadot/react-identicon/types';\ninterface Props extends IdentityProps {\n  address?: string;\n  formatFound?: string | null;\n}\nconst useStyles = makeStyles(() => ({\n  placeholder: {\n    filter: 'grayscale(1)'\n  }\n}));\nconst emptyAddress: string = '1nUC7afqmo7zwRFWxDjrUQu9skk6fk99pafb4SiyGSRc8z3';\n\nexport default function AccountIdenticon({ address, formatFound, size = 24, theme = 'polkadot', ...props }: Props) {\n  const { dispatchMessage } = useUpdateMessageContext();\n  const placeholder = !address || formatFound === INCORRECT_FORMAT;\n  const value = !placeholder ? address : emptyAddress;\n  const classes = useStyles();\n\n  const onCopy = useCallback(() => {\n    value !== emptyAddress &&\n      dispatchMessage(MessageActionsCreators.triggerSuccessMessage({ message: 'Address copied' }));\n  }, [dispatchMessage, value]);\n\n  return (\n    <Identicon\n      className={ctx(placeholder && classes.placeholder)}\n      value={value}\n      size={size}\n      theme={theme}\n      {...props}\n      onCopy={onCopy}\n    />\n  );\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport type { KeyringPair } from '@polkadot/keyring/types';\nimport { Balance } from '@polkadot/types/interfaces';\n\nimport { AccountActionsTypes } from '../actions/accountActions';\n\nexport type Account = KeyringPair | null;\n\nexport interface Payload {\n  [propName: string]: any;\n}\n\nexport type BalanceState = {\n  chainTokens: string;\n  formattedBalance: string;\n  free: Balance;\n};\n\ntype AccountInfo = {\n  address: string;\n  balance: BalanceState;\n  name: string;\n};\n\ninterface DisplayAccount {\n  account: AccountInfo;\n  companionAccount: AccountInfo;\n}\n\nexport interface DisplayAccounts {\n  [chain: string]: DisplayAccount[];\n}\n\nexport interface AccountState {\n  account: Account;\n  accounts: Array<KeyringPair> | [];\n  companionAccount: string | null;\n  senderAccountBalance: BalanceState | null;\n  senderCompanionAccountBalance: BalanceState | null;\n  displaySenderAccounts: DisplayAccounts;\n}\n\nexport type AccountsActionType = { type: AccountActionsTypes; payload: Payload };\n\nexport enum AddressKind {\n  NATIVE = 'native',\n  COMPANION = 'companion'\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { fade, makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\nimport Balance from './Balance';\nimport shorterItem from '../util/shortenItem';\nimport AccountIdenticon from './AccountIdenticon';\nimport { Box, Tooltip } from '@material-ui/core';\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\nimport { AddressKind } from '../types/accountTypes';\n\nexport interface Props {\n  friendlyName?: string | null;\n  isDerived?: boolean;\n  addressKind?: AddressKind | string;\n  address?: string;\n  hideAddress?: boolean;\n  onClick?: () => void;\n  balance?: string | null | undefined;\n  className?: string;\n  withTooltip?: boolean;\n  id?: string | undefined;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  address: {\n    display: 'flex',\n    alignItems: 'center',\n    marginLeft: theme.spacing(),\n    marginRight: theme.spacing(),\n    width: '100%',\n    overflow: 'auto'\n  },\n  missingAddress: {\n    color: theme.palette.text.disabled\n  },\n  tooltipIcon: {\n    ...theme.typography.body1,\n    marginTop: 2,\n    marginLeft: 2,\n    '&:not(:hover)': {\n      color: fade(theme.palette.text.hint, 0.75)\n    }\n  }\n}));\n\nconst AccountDisplay = ({\n  address = '',\n  addressKind,\n  balance,\n  friendlyName,\n  hideAddress = false,\n  onClick,\n  className,\n  withTooltip,\n  id\n}: Props) => {\n  const classes = useStyles();\n  const displayText = () => {\n    const shortAddress = shorterItem(address);\n    const name = friendlyName ? `${friendlyName} [${shortAddress}]` : shortAddress;\n    const justFriendlyName = friendlyName || shortAddress;\n    const displayName = hideAddress ? justFriendlyName : name;\n\n    if (addressKind) {\n      return `${addressKind}(${displayName})`;\n    }\n\n    return displayName;\n  };\n\n  return (\n    <Box onClick={onClick} display=\"flex\" alignItems=\"center\" className={className}>\n      <AccountIdenticon address={address} />\n      <div className={`${classes.address} ${!address && classes.missingAddress}`} id={id}>\n        {displayText()}\n        {withTooltip && (\n          <Tooltip title={address} arrow placement=\"top\" interactive>\n            <HelpOutlineIcon className={classes.tooltipIcon} />\n          </Tooltip>\n        )}\n      </div>\n      <Balance balance={balance} />\n    </Box>\n  );\n};\n\nexport default AccountDisplay;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from 'react';\n\nimport useApiBalance from '../hooks/subscriptions/useApiBalance';\nimport useBalance from '../hooks/subscriptions/useBalance';\nimport AccountDisplay, { Props as AccountDisplayProps } from './AccountDisplay';\nimport { AddressKind } from '../types/accountTypes';\ninterface Props extends AccountDisplayProps {\n  chain?: string | undefined;\n  value: string;\n}\n\nconst Account = ({ value, chain, hideAddress = false, isDerived = false, id, ...props }: Props) => {\n  const { api, address } = useApiBalance(value, chain, isDerived);\n\n  const state = useBalance(api, address, true);\n\n  return (\n    <>\n      <AccountDisplay\n        address={address}\n        balance={`${state.formattedBalance} ${state.formattedBalance === '0' ? state.chainTokens : ''}`}\n        addressKind={isDerived ? AddressKind.COMPANION : undefined}\n        hideAddress={hideAddress}\n        id={id ? id : undefined}\n        {...props}\n      />\n    </>\n  );\n};\n\nexport default Account;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from 'react';\nimport { MenuItem, Select } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { encodeAddress } from '@polkadot/util-crypto';\nimport { useSourceTarget } from '../contexts/SourceTargetContextProvider';\nimport useAccounts from '../hooks/accounts/useAccounts';\nimport useLoadingApi from '../hooks/connections/useLoadingApi';\nimport { Account as AccountType } from '../types/accountTypes';\nimport formatAccounts from '../util/formatAccounts';\nimport Account from './Account';\nimport AccountDisplay from './AccountDisplay';\nimport { AddressKind } from '../types/accountTypes';\nimport { SelectLabel, styleAccountCompanion } from '../components';\nimport useChainGetters from '../hooks/chain/useChainGetters';\nimport { useAccountContext } from '../contexts/AccountContextProvider';\nimport isNull from 'lodash/isNull';\n\n// TODO replace MUI Select with MUI Popover it wraps around or Autocomplete to have more control over appearance\n\nconst useStyles = makeStyles((theme) => ({\n  networkHeading: {\n    padding: theme.spacing(2),\n    paddingBottom: 0,\n    borderTop: `1px solid ${theme.palette.divider}`,\n    ...theme.typography.overline,\n    color: theme.palette.text.hint,\n    '&:first-child': {\n      paddingTop: 0,\n      border: 'none'\n    }\n  },\n  selectAccountMainItem: {\n    display: 'block',\n    paddingTop: theme.spacing(),\n    paddingBottom: theme.spacing(),\n    paddingLeft: theme.spacing(1.75)\n  },\n  accountMain: {\n    '& .MuiSelect-select': {\n      padding: theme.spacing(1.25),\n      paddingTop: theme.spacing(0.5),\n      paddingRight: theme.spacing(3),\n      border: `1px solid ${theme.palette.divider}`,\n      borderRadius: theme.spacing(1.5),\n      borderBottomLeftRadius: 0,\n      borderBottomRightRadius: 0\n    }\n  },\n  accountCompanion: {\n    ...styleAccountCompanion(theme)\n  }\n}));\n\nconst Sender = () => {\n  const classes = useStyles();\n  const [chains, setChains] = useState<Array<string[]>>([]);\n  const { setCurrentAccount } = useAccounts();\n  const {\n    account,\n    accounts,\n    companionAccount,\n    senderAccountBalance,\n    senderCompanionAccountBalance\n  } = useAccountContext();\n  const {\n    sourceChainDetails: {\n      chain: sourceChain,\n      configs: { ss58Format }\n    },\n    targetChainDetails: { chain: targetChain }\n  } = useSourceTarget();\n  const { getSS58PrefixByChain } = useChainGetters();\n\n  const { areApiReady } = useLoadingApi();\n\n  useEffect(() => {\n    if (!chains.length) {\n      setChains([\n        [sourceChain, targetChain],\n        [targetChain, sourceChain]\n      ]);\n    }\n  }, [chains.length, sourceChain, targetChain]);\n\n  const value = account ? encodeAddress(account.address, ss58Format) : 'init';\n\n  const onChange = (value: string, chain: string) => {\n    setCurrentAccount(value, chain);\n  };\n\n  const renderAccounts = (chains: string[]) => {\n    const [source, target] = chains;\n    const ss58Format = getSS58PrefixByChain(source);\n    const formatedAccounts = formatAccounts(accounts, ss58Format);\n    const items = formatedAccounts.map(({ text, value, key }: any) => (\n      <MenuItem\n        className={classes.selectAccountMainItem}\n        key={key}\n        value={value}\n        onClick={() => {\n          onChange(value, source);\n        }}\n      >\n        <Account friendlyName={text} value={value} chain={source} />\n        <Account friendlyName={text} value={value} chain={target} isDerived hideAddress />\n      </MenuItem>\n    ));\n    return [\n      <div className={classes.networkHeading} key={source}>\n        {source}\n      </div>,\n      items\n    ];\n  };\n\n  const getName = (account: AccountType) => (account!.meta.name as string).toLocaleUpperCase();\n\n  const AccountSelected = () => {\n    if (account) {\n      const text = getName(account);\n      return (\n        <AccountDisplay\n          friendlyName={text}\n          address={account.address}\n          balance={senderAccountBalance?.formattedBalance}\n        />\n      );\n    }\n    return <AccountDisplay friendlyName=\"Select sender account\" hideAddress />;\n  };\n\n  return (\n    <>\n      <Select\n        id=\"test-sender-component\"\n        disableUnderline\n        fullWidth\n        disabled={!areApiReady}\n        className={classes.accountMain}\n        value={value}\n        renderValue={(): React.ReactNode => (\n          <>\n            <SelectLabel>Sender</SelectLabel>\n            <AccountSelected />\n          </>\n        )}\n      >\n        {chains.map((chain) => renderAccounts(chain))}\n      </Select>\n      <div className={classes.accountCompanion}>\n        {companionAccount && !isNull(senderCompanionAccountBalance) ? (\n          <AccountDisplay\n            friendlyName={getName(account)}\n            address={companionAccount}\n            addressKind={AddressKind.COMPANION}\n            balance={senderCompanionAccountBalance!.formattedBalance}\n            hideAddress\n            withTooltip\n          />\n        ) : (\n          <AccountDisplay friendlyName=\"Sender\" addressKind={AddressKind.COMPANION} hideAddress />\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default Sender;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport type { KeyringPair } from '@polkadot/keyring/types';\nimport { encodeAddress } from '@polkadot/util-crypto';\n\nexport default function formatAccounts(accounts: Array<KeyringPair>, ss58Format: number) {\n  // TO-DO: This function lacks the  capabillity to filter accounts that exist only on specific chains.\n  return accounts.map(({ meta, address }) => {\n    const formatedAddress = encodeAddress(address, ss58Format);\n    return {\n      icon: 'user',\n      key: formatedAddress,\n      text: (meta.name as string).toLocaleUpperCase(),\n      value: formatedAddress\n    };\n  });\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { useSnackbar } from 'notistack';\nimport React, { useEffect } from 'react';\nimport styled from 'styled-components';\n\nimport { MessageActionsCreators } from '../actions/messageActions';\nimport { useMessageContext, useUpdateMessageContext } from '../contexts/MessageContext';\n\nconst CloseButton = styled.button`\n  display: inline-block;\n  color: white;\n  font-size: 1em;\n  background: transparent;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: none;\n  display: block;\n  outline: none;\n  font-weight: 600;\n`;\n\nexport default function SnackBar() {\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const { message, variant } = useMessageContext();\n  const { dispatchMessage } = useUpdateMessageContext();\n\n  useEffect(() => {\n    if (message && variant) {\n      enqueueSnackbar(message, {\n        action: <CloseButton onClick={() => closeSnackbar()}>CLOSE</CloseButton>,\n        anchorOrigin: { horizontal: 'right', vertical: 'top' },\n        variant\n      });\n      dispatchMessage(MessageActionsCreators.clearMessage());\n    }\n  }, [closeSnackbar, message, variant, enqueueSnackbar, dispatchMessage]);\n\n  return null;\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from 'react';\nimport { InputAdornment } from '@material-ui/core';\nimport { useSourceTarget } from '../contexts/SourceTargetContextProvider';\n\ninterface Props {\n  position?: 'start' | 'end';\n}\n\nexport const TokenSymbol = ({ position = 'start' }: Props): React.ReactElement => {\n  const { targetChainDetails } = useSourceTarget();\n\n  return (\n    <InputAdornment position={position}>{targetChainDetails.apiConnection.api.registry.chainTokens}</InputAdornment>\n  );\n};\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from 'react';\nimport { Box, InputBase } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useTransactionContext } from '../contexts/TransactionContext';\nimport useApiBalance from '../hooks/subscriptions/useApiBalance';\nimport useBalance from '../hooks/subscriptions/useBalance';\nimport useReceiver from '../hooks/transactions/useReceiver';\nimport AccountIdenticon from './AccountIdenticon';\nimport { SelectLabel } from '../components';\nimport Balance from './Balance';\n\nconst useStyles = makeStyles((theme) => ({\n  accountMain: {\n    padding: theme.spacing(1.25),\n    paddingTop: theme.spacing(0.5),\n    paddingRight: theme.spacing(3),\n    border: `1px solid ${theme.palette.divider}`,\n    borderRadius: theme.spacing(1.5),\n    borderBottomLeftRadius: 0,\n    borderBottomRightRadius: 0,\n    '& input': {\n      color: theme.palette.text.secondary\n    }\n  },\n  address: {\n    marginLeft: theme.spacing(),\n    marginRight: theme.spacing(),\n    width: '100%',\n    overflow: 'auto'\n  }\n}));\n\n// TODO: To refactor state management for this component #160\n\nfunction ReceiverInput() {\n  const classes = useStyles();\n  const { onReceiverChange } = useReceiver();\n  const { unformattedReceiverAddress, formatFound, showBalance } = useTransactionContext();\n  const { api, address } = useApiBalance(unformattedReceiverAddress, formatFound, false);\n  const state = useBalance(api, address, true);\n\n  const addressInput = unformattedReceiverAddress || '';\n  return (\n    <div className={classes.accountMain}>\n      <SelectLabel>Receiver</SelectLabel>\n      <Box display=\"flex\" alignItems=\"center\">\n        <AccountIdenticon address={addressInput} formatFound={formatFound} />\n        <InputBase\n          id=\"test-receiver-input\"\n          className={classes.address}\n          fullWidth\n          onChange={onReceiverChange}\n          autoComplete=\"off\"\n          value={addressInput}\n          placeholder=\"Recipient address\"\n        />\n        {showBalance && state && <Balance balance={state.formattedBalance} id=\"test-receiver-balance\" />}\n      </Box>\n    </div>\n  );\n}\n\nexport default ReceiverInput;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useCallback, useEffect } from 'react';\nimport { TransactionActionCreators } from '../../actions/transactionActions';\n\nimport { useSourceTarget } from '../../contexts/SourceTargetContextProvider';\n\nimport { useUpdateTransactionContext, useTransactionContext } from '../../contexts/TransactionContext';\n\nimport usePrevious from '../../hooks/react/usePrevious';\n\nexport default function useReceiver() {\n  const { dispatchTransaction } = useUpdateTransactionContext();\n  const { unformattedReceiverAddress } = useTransactionContext();\n  const { targetChainDetails, sourceChainDetails } = useSourceTarget();\n\n  const { chain: targetChain } = targetChainDetails;\n  const prevTargetChain = usePrevious(targetChain);\n\n  const onReceiverChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const unformattedReceiverAddress = event.target.value;\n      dispatchTransaction(\n        TransactionActionCreators.setReceiver({\n          unformattedReceiverAddress,\n          sourceChainDetails,\n          targetChainDetails\n        })\n      );\n    },\n    [dispatchTransaction, sourceChainDetails, targetChainDetails]\n  );\n\n  useEffect(() => {\n    if (prevTargetChain !== targetChain) {\n      dispatchTransaction(TransactionActionCreators.reset());\n    }\n  }, [unformattedReceiverAddress, prevTargetChain, targetChain, dispatchTransaction]);\n\n  return { onReceiverChange };\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AccountDisplay from './AccountDisplay';\nimport { useGenericAccount } from '../hooks/accounts/useGenericAccount';\nimport { AddressKind } from '../types/accountTypes';\nimport { Paper } from '@material-ui/core';\nimport { styleAccountCompanion } from '.';\n\ninterface Props {\n  value: string;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  accountCompanion: {\n    ...styleAccountCompanion(theme),\n    borderRadius: 0,\n    '&:last-child': {\n      borderTopLeftRadius: 0,\n      borderTopRightRadius: 0,\n      borderRadius: theme.spacing(1.5)\n    }\n  },\n  selectAccountCompanionItem: {\n    '&:hover': {\n      cursor: 'pointer',\n      backgroundColor: theme.palette.secondary.light\n    }\n  }\n}));\n\nconst GenericAccount = ({ value }: Props) => {\n  const classes = useStyles();\n  const {\n    selected,\n    shortGenericAddress,\n    companionAddress,\n    setNativeAsTarget,\n    setCompanionAsTarget,\n    nativeAddress,\n    nativeState,\n    companionState\n  } = useGenericAccount(value);\n\n  return (\n    <Paper elevation={!selected ? 23 : 0}>\n      {(!selected || selected === AddressKind.NATIVE) && (\n        <AccountDisplay\n          className={`${classes.accountCompanion} ${classes.selectAccountCompanionItem}`}\n          onClick={setNativeAsTarget}\n          address={nativeAddress}\n          addressKind={AddressKind.NATIVE}\n          balance={nativeState.formattedBalance}\n          friendlyName={shortGenericAddress}\n          id={`test-${AddressKind.NATIVE}-input`.toLowerCase()}\n          hideAddress\n          withTooltip\n        />\n      )}\n      {(!selected || selected === AddressKind.COMPANION) && (\n        <AccountDisplay\n          className={`${classes.accountCompanion} ${classes.selectAccountCompanionItem}`}\n          onClick={setCompanionAsTarget}\n          address={companionAddress}\n          addressKind={AddressKind.COMPANION}\n          balance={companionState.formattedBalance}\n          friendlyName={shortGenericAddress}\n          id={`test-${AddressKind.COMPANION}-input`.toLowerCase()}\n          hideAddress\n          withTooltip\n        />\n      )}\n    </Paper>\n  );\n};\n\nexport default GenericAccount;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { useState, useCallback } from 'react';\nimport { encodeAddress } from '@polkadot/util-crypto';\nimport { useUpdateTransactionContext } from '../../contexts/TransactionContext';\nimport { TransactionActionCreators } from '../../actions/transactionActions';\nimport { useSourceTarget } from '../../contexts/SourceTargetContextProvider';\nimport useBalance from '../subscriptions/useBalance';\nimport getDeriveAccount from '../../util/getDeriveAccount';\nimport shorterItem from '../../util/shortenItem';\nimport { getBridgeId } from '../../util/getConfigs';\nimport { AddressKind } from '../../types/accountTypes';\n\nexport const useGenericAccount = (value: string) => {\n  const [selected, setSelected] = useState('');\n\n  const { dispatchTransaction } = useUpdateTransactionContext();\n  const {\n    sourceChainDetails: { configs: sourceConfigs },\n    targetChainDetails: {\n      configs: targetConfigs,\n      apiConnection: { api: targetApi }\n    }\n  } = useSourceTarget();\n\n  const nativeAddress = encodeAddress(value, targetConfigs.ss58Format);\n  const nativeState = useBalance(targetApi, nativeAddress, true);\n\n  const companionAddress = getDeriveAccount({\n    ss58Format: targetConfigs.ss58Format,\n    address: value,\n    bridgeId: getBridgeId(targetConfigs, sourceConfigs.chainName)\n  });\n  const companionState = useBalance(targetApi, companionAddress, true);\n\n  const looseHelperAccount = useCallback(() => {\n    setSelected('');\n    dispatchTransaction(TransactionActionCreators.setReceiverAddress(null));\n  }, [dispatchTransaction]);\n\n  const setNativeAsTargetOrClear = useCallback(\n    (address: string, addressKind: AddressKind) => {\n      if (selected) {\n        looseHelperAccount();\n        return;\n      }\n      setSelected(addressKind);\n      dispatchTransaction(TransactionActionCreators.setReceiverAddress(address));\n    },\n    [dispatchTransaction, looseHelperAccount, selected]\n  );\n\n  const setNativeAsTarget = useCallback(() => setNativeAsTargetOrClear(nativeAddress, AddressKind.NATIVE), [\n    nativeAddress,\n    setNativeAsTargetOrClear\n  ]);\n  const setCompanionAsTarget = useCallback(() => setNativeAsTargetOrClear(companionAddress, AddressKind.COMPANION), [\n    companionAddress,\n    setNativeAsTargetOrClear\n  ]);\n\n  const shortGenericAddress = shorterItem(value);\n\n  return {\n    selected,\n    shortGenericAddress,\n    setNativeAsTarget,\n    setCompanionAsTarget,\n    nativeAddress,\n    nativeState,\n    companionAddress,\n    companionState\n  };\n};\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useSourceTarget } from '../contexts/SourceTargetContextProvider';\nimport { useTransactionContext } from '../contexts/TransactionContext';\nimport Account from './Account';\nimport AccountDisplay from './AccountDisplay';\nimport { AddressKind } from '../types/accountTypes';\nimport GenericAccount from './GenericAccount';\nimport shortenItem from '../util/shortenItem';\nimport { styleAccountCompanion } from './Inputs';\n\nconst useStyles = makeStyles((theme) => ({\n  accountCompanion: {\n    ...styleAccountCompanion(theme)\n  }\n}));\n\nconst ReceiverDerivedAccount = () => {\n  const classes = useStyles();\n  const {\n    genericReceiverAccount,\n    derivedReceiverAccount,\n    receiverAddress,\n    unformattedReceiverAddress\n  } = useTransactionContext();\n\n  const {\n    targetChainDetails: { chain: targetChain }\n  } = useSourceTarget();\n\n  if (genericReceiverAccount) {\n    return <GenericAccount value={genericReceiverAccount} />;\n  }\n\n  if (derivedReceiverAccount) {\n    const shortUnformattedReceiver = shortenItem(unformattedReceiverAddress || '');\n    return (\n      <div className={classes.accountCompanion}>\n        <Account\n          friendlyName={shortUnformattedReceiver}\n          value={receiverAddress!}\n          chain={targetChain}\n          id={`test-${AddressKind.COMPANION}-input`.toLowerCase()}\n          isDerived\n          hideAddress\n          withTooltip\n        />\n      </div>\n    );\n  }\n\n  if (!receiverAddress) {\n    return (\n      <div className={classes.accountCompanion}>\n        <AccountDisplay />\n      </div>\n    );\n  }\n\n  return (\n    <div className={classes.accountCompanion}>\n      <AccountDisplay\n        address={receiverAddress!}\n        addressKind={AddressKind.NATIVE}\n        id={`test-${AddressKind.NATIVE}-input`.toLowerCase()}\n        withTooltip\n      />\n    </div>\n  );\n};\n\nexport default ReceiverDerivedAccount;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from 'react';\nimport ReceiverInput from './ReceiverInput';\nimport ReceiverDerivedAccount from './ReceiverDerivedAccount';\nimport { useTransactionContext } from '../contexts/TransactionContext';\nimport { Typography } from '@material-ui/core';\n\nconst Receiver = () => {\n  const { addressValidationError } = useTransactionContext();\n  return (\n    <>\n      <ReceiverInput />\n      <ReceiverDerivedAccount />\n      <Typography variant=\"body2\" color=\"error\">\n        {addressValidationError}\n      </Typography>\n    </>\n  );\n};\n\nexport default Receiver;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Box, makeStyles, TextField } from '@material-ui/core';\nimport { useSourceTarget } from '../contexts/SourceTargetContextProvider';\nimport { useTransactionContext } from '../contexts/TransactionContext';\nimport { useAccountContext } from '../contexts/AccountContextProvider';\nimport { TransactionActionCreators } from '../actions/transactionActions';\nimport { useUpdateTransactionContext } from '../contexts/TransactionContext';\nimport useBalance from '../hooks/subscriptions/useBalance';\nimport useSendMessage from '../hooks/chain/useSendMessage';\nimport { TransactionTypes } from '../types/transactionTypes';\nimport { TokenSymbol } from './TokenSymbol';\nimport Receiver from './Receiver';\nimport { Alert, ButtonSubmit } from '../components';\nimport { EstimatedFee } from '../components/EstimatedFee';\nimport useDebounceState from '../hooks/react/useDebounceState';\nimport BN from 'bn.js';\n\nconst useStyles = makeStyles((theme) => ({\n  inputAmount: {\n    '& .MuiInputBase-root': {\n      '& .MuiInputAdornment-root': {\n        position: 'absolute',\n        right: theme.spacing(2),\n        ...theme.typography.subtitle2\n      },\n      '& input': {\n        textAlign: 'center',\n        ...theme.typography.subtitle2,\n        fontSize: theme.typography.h1.fontSize,\n        color: theme.palette.primary.main\n      }\n    },\n    minHeight: '95px'\n  }\n}));\n\nfunction Transfer() {\n  const { dispatchTransaction } = useUpdateTransactionContext();\n  const classes = useStyles();\n  const [amountNotCorrect, setAmountNotCorrect] = useState<boolean>(false);\n  const { sourceChainDetails, targetChainDetails } = useSourceTarget();\n  const { account } = useAccountContext();\n  const {\n    estimatedFee,\n    transferAmount,\n    transferAmountError,\n    transactionRunning,\n    transactionReadyToExecute\n  } = useTransactionContext();\n  const { api } = sourceChainDetails.apiConnection;\n  const balance = useBalance(api, account?.address || '');\n\n  const dispatchCallback = useCallback(\n    (value: string) => {\n      dispatchTransaction(\n        TransactionActionCreators.setTransferAmount(\n          value !== null ? value?.toString() : '',\n          api.registry.chainDecimals[0]\n        )\n      );\n    },\n    [api.registry.chainDecimals, dispatchTransaction]\n  );\n\n  const [currentInput, setInput] = useDebounceState({ initialValue: '0', dispatchCallback });\n\n  const { sendLaneMessage } = useSendMessage({\n    input: transferAmount?.toString() ?? '',\n    type: TransactionTypes.TRANSFER\n  });\n\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInput(event.target.value);\n  };\n\n  useEffect((): void => {\n    transactionRunning && setInput('');\n  }, [setInput, transactionRunning]);\n\n  useEffect((): void => {\n    estimatedFee &&\n      transferAmount &&\n      setAmountNotCorrect(new BN(balance.free).sub(transferAmount).add(new BN(estimatedFee)).isNeg());\n  }, [transferAmount, estimatedFee, balance]);\n\n  return (\n    <>\n      <Box mb={2}>\n        <TextField\n          id=\"test-amount-send\"\n          onChange={onChange}\n          value={currentInput}\n          placeholder={'0'}\n          className={classes.inputAmount}\n          fullWidth\n          variant=\"outlined\"\n          autoComplete=\"off\"\n          helperText={transferAmountError || ''}\n          InputProps={{\n            endAdornment: <TokenSymbol position=\"start\" />\n          }}\n        />\n      </Box>\n      <Receiver />\n      <ButtonSubmit disabled={!transactionReadyToExecute || amountNotCorrect} onClick={sendLaneMessage}>\n        Send bridge transfer from {sourceChainDetails.chain} to {targetChainDetails.chain}\n      </ButtonSubmit>\n      {amountNotCorrect ? (\n        <Alert severity=\"error\">\n          Account&apos;s amount (including fees: {estimatedFee}) is not enough for this transaction.\n        </Alert>\n      ) : (\n        <EstimatedFee />\n      )}\n    </>\n  );\n}\n\nexport default Transfer;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { Box, Typography } from '@material-ui/core';\nimport React from 'react';\n\nimport { BoxSidebar, BoxUI, ButtonExt, StorageDrawer, MenuAction, NetworkSides, NetworkStats } from '../components';\nimport CustomCall from '../components/CustomCall';\nimport ExtensionAccountCheck from '../components/ExtensionAccountCheck';\nimport Remark from '../components/Remark';\nimport Sender from '../components/Sender';\nimport SnackBar from '../components/SnackBar';\nimport Transfer from '../components/Transfer';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport Transactions from '../components/Transactions';\nimport { useGUIContext } from '../contexts/GUIContextProvider';\nimport { TransactionTypes } from '../types/transactionTypes';\nimport { MenuActionItemsProps } from '../types/guiTypes';\n\nconst ActionComponents = {\n  [TransactionTypes.TRANSFER]: <Transfer />,\n  [TransactionTypes.REMARK]: <Remark />,\n  [TransactionTypes.CUSTOM]: <CustomCall />\n};\n\nfunction Main() {\n  const { actions, action, setAction } = useGUIContext();\n  const searchItems = (choice: TransactionTypes) => actions.find((x: MenuActionItemsProps) => x.type === choice);\n\n  return (\n    <>\n      <BoxSidebar>\n        <div>\n          <Typography variant=\"button\">Bridges UI</Typography>\n          <NetworkSides />\n          <NetworkStats />\n          <StorageDrawer />\n        </div>\n        <ButtonExt> Help & Feedback </ButtonExt>\n      </BoxSidebar>\n      <BoxUI>\n        <MenuAction actions={actions} action={action} changeMenu={setAction} />\n        <ExtensionAccountCheck component={<Sender />} />\n        <Box marginY={2} textAlign=\"center\" width=\"100%\">\n          <ArrowDownwardIcon fontSize=\"large\" color=\"primary\" />\n        </Box>\n        <>{ActionComponents[action]}</>\n        <Transactions type={searchItems(action)?.title} />\n        <SnackBar />\n      </BoxUI>\n    </>\n  );\n}\n\nexport default Main;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from 'react';\nimport { Backdrop, CircularProgress } from '@material-ui/core';\nimport { SnackbarProvider } from 'notistack';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { substrateProviders } from './configs';\nimport { AccountContextProvider } from './contexts/AccountContextProvider';\nimport { GUIContextProvider } from './contexts/GUIContextProvider';\nimport { KeyringContextProvider } from './contexts/KeyringContextProvider';\nimport { MessageContextProvider } from './contexts/MessageContext';\nimport { SourceTargetContextProvider } from './contexts/SourceTargetContextProvider';\nimport { TransactionContextProvider } from './contexts/TransactionContext';\nimport { SubscriptionsContextProvider } from './contexts/SubscriptionsContextProvider';\nimport { ApiCallsContextProvider } from './contexts/ApiCallsContextProvider';\nimport { useConnections } from './hooks/connections/useConnections';\nimport Main from './screens/Main';\nimport isEmpty from 'lodash/isEmpty';\n\nconst [connectionDetails1, connectionDetails2] = substrateProviders();\n\nfunction App() {\n  const { connections } = useConnections([connectionDetails1, connectionDetails2]);\n\n  if (isEmpty(connections)) {\n    return (\n      <Backdrop open>\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>\n    );\n  }\n\n  return (\n    <SourceTargetContextProvider connections={connections}>\n      <KeyringContextProvider>\n        <ApiCallsContextProvider>\n          <AccountContextProvider>\n            <SubscriptionsContextProvider>\n              <MessageContextProvider>\n                <SnackbarProvider>\n                  <TransactionContextProvider>\n                    <BrowserRouter>\n                      <Switch>\n                        <Route path={'/'}>\n                          <GUIContextProvider>\n                            <Main />\n                          </GUIContextProvider>\n                        </Route>\n                      </Switch>\n                    </BrowserRouter>\n                  </TransactionContextProvider>\n                </SnackbarProvider>\n              </MessageContextProvider>\n            </SubscriptionsContextProvider>\n          </AccountContextProvider>\n        </ApiCallsContextProvider>\n      </KeyringContextProvider>\n    </SourceTargetContextProvider>\n  );\n}\n\nexport default App;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { useState, useEffect } from 'react';\nimport { useApiConnection } from './useApiConnection';\nimport isEmpty from 'lodash/isEmpty';\nimport { SourceTargetState, ChainDetails, ConnectionChainInformation } from '../../types/sourceTargetTypes';\nimport { Subscriptions } from '../../types/subscriptionsTypes';\n\nexport function useConnections(chainsConnections: ConnectionChainInformation[]) {\n  const [connectionDetails1, connectionDetails2] = chainsConnections;\n  const { configs: chain1Configs, polkadotjsUrl: polkadotjsUrl1, ...apiConnection1 } = useApiConnection(\n    connectionDetails1\n  );\n  const { configs: chain2Configs, polkadotjsUrl: polkadotjsUrl2, ...apiConnection2 } = useApiConnection(\n    connectionDetails2\n  );\n  const [connections, setConnections] = useState<SourceTargetState>({} as SourceTargetState);\n  const [apiReady, setApiReady] = useState(false);\n\n  useEffect(() => {\n    if (chain1Configs && chain2Configs) {\n      const chainName1 = chain1Configs.chainName;\n      const chainName2 = chain2Configs.chainName;\n      const apiReady = apiConnection1?.isApiReady && apiConnection2?.isApiReady;\n      if (chainName1 && chainName2 && isEmpty(connections)) {\n        const connections = {\n          [ChainDetails.SOURCE]: {\n            configs: chain1Configs,\n            apiConnection: apiConnection1,\n            chain: chainName1,\n            polkadotjsUrl: polkadotjsUrl1,\n            subscriptions: {} as Subscriptions\n          },\n          [ChainDetails.TARGET]: {\n            configs: chain2Configs,\n            apiConnection: apiConnection2,\n            chain: chainName2,\n            polkadotjsUrl: polkadotjsUrl2,\n            subscriptions: {} as Subscriptions\n          }\n        };\n        setConnections(connections);\n        setApiReady(apiReady);\n      }\n    }\n  }, [apiConnection1, apiConnection2, chain1Configs, chain2Configs, connections, polkadotjsUrl1, polkadotjsUrl2]);\n\n  return { connections, apiReady };\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport { checkExpectedVariables } from './util/envVariablesValidations';\n\ncheckExpectedVariables();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}